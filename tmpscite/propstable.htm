<html><head><title>TextPad</title></head><body spellcheck="false" style="font:1rem/1.4 consolas,sans-serif;padding:2.4rem 3.2rem;margin:0;background:#fff;color:#302e2e;"><h3 id="DefinedVariables" style="border: 2px solid rgb(255, 204, 0); background-color: rgb(255, 247, 238); padding: 2px 5px; color: rgb(0, 0, 0); font-family: &quot;Times New Roman&quot;;">Some properties are only available on<span style="font-size: medium; background-color: rgb(255, 255, 255); font-weight: normal;">&nbsp;</span><span class="windowsonly" style="font-size: medium; font-weight: normal; background: rgb(235, 243, 255);">Windows</span><span style="font-size: medium; background-color: rgb(255, 255, 255); font-weight: normal;">,</span><span style="font-size: medium; background-color: rgb(255, 255, 255); font-weight: normal;">&nbsp;</span><span class="gtkonly" style="font-size: medium; font-weight: normal; background: rgb(255, 255, 231);">GTK+</span><span style="font-size: medium; background-color: rgb(255, 255, 255); font-weight: normal;">, or.</span><span style="font-size: medium; background-color: rgb(255, 255, 255); font-weight: normal;">&nbsp;</span><span class="osxonly" style="font-size: medium; font-weight: normal; background: rgb(255, 231, 231);">OS X</span><span style="font-size: medium; background-color: rgb(255, 255, 255); font-weight: normal;">.</span></h3><table cellpadding="1" cellspacing="0" border="1" summary="Defined variables in property files" style="border: 1px solid rgb(31, 31, 31); border-collapse: collapse; color: rgb(0, 0, 0); font-family: &quot;Times New Roman&quot;;"><tbody><tr id="property-position.left"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-position.top"></a><a name="property-position.width"></a><a name="property-position.height"></a><a name="property-position.maximize"></a>position.left<br>position.top<br>position.width<br>position.height<br>position.maximize</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set the initial window size and position. If these are omitted then the environment's defaults are used. If the width or height are -1 or the position.maximize property is set then the window is maximised.</td></tr><tr class="windowsonly" id="property-position.tile" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">position.tile</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If there is another copy of SciTE open, set the initial window position to be with the left side at position.left + position.width so that most of the time you can see both copies at once without overlap. Works nicely if position.left set to 0 and position.width set to half of the screen width.</td></tr><tr id="property-buffers"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">buffers</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to a number between 1 and 100 to configure that many buffers. Values outside this range are clamped to be within the range. The default is 1 which turns off UI features concerned with buffers.<br>This value is read only once, early in the startup process and only from the global and user properties files. So after changing it, restart SciTE to see the effect.</td></tr><tr id="property-buffers.zorder.switching"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">buffers.zorder.switching</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This setting chooses the ordering of buffer switching when Ctrl+Tab pressed. Set to 1, the buffers are selected in the order of their previous selection otherwise they are chosen based on the buffer number.</td></tr><tr id="property-are.you.sure"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-are.you.sure.for.build"></a>are.you.sure<br>are.you.sure.for.build</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The classic GUI question. Normally, when SciTE is about to close a file which has unsaved edits it asks this annoying question. To turn off the question, set are.you.sure to 0 and files will be automatically saved without bothering the user. To abandon edits to a file use the New command. New always asks "Are you sure?" giving an opportunity to not save the file.<br>When running or building a file, its most likely that you want the file to be saved first. To enable a confirmation dialog for performing Compile, Build or Go commands, set are.you.sure.for.build=1.</td></tr><tr id="property-save.all.for.build"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">save.all.for.build</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">SciTE normally saves the current buffer when performing a Compile, Build, or Go command. To save all buffers set save.all.for.build=1</td></tr><tr id="property-view.whitespace"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-view.indentation.whitespace"></a>view.whitespace<br>view.indentation.whitespace</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting view.whitespace to 1 makes SciTE start up with whitespace visible.<br>Setting view.indentation.whitespace to 0 hides visible whitespace inside indentation.<br>Setting view.indentation.whitespace to 1 makes indentation whitespace visible<br>Setting view.indentation.whitespace to 2 makes indentation whitespace only visible</td></tr><tr id="property-whitespace.fore"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-whitespace.back"></a>whitespace.fore<br>whitespace.back</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Sets the colours used for displaying all visible whitespace, overriding any styling applied by the lexer.</td></tr><tr id="property-view.indentation.guides"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-view.indentation.examine"></a><a name="property-highlight.indentation.guides"></a>view.indentation.guides<br>view.indentation.examine<br>view.indentation.examine.<i>filepattern</i><br>highlight.indentation.guides</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting view.indentation.guides to 1 displays dotted vertical lines within indentation white space every indent.size columns.<br>Setting view.indentation.examine to 1 to display guides within real indentation whitespace only, 2 according to the next non-empty line (good for Python) or 3 according to both the next and previous non-empty lines (good for most languages).<br>Setting highlight.indentation.guides to 1 highlights the indentation guide associated with a brace when that brace is highlighted.</td></tr><tr id="property-view.eol"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">view.eol</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting this to 1 makes SciTE display the characters that make up line ends. This looks similar to (CR), (LF), or (CR)(LF). This is useful when using files created on another operating system with software that is picky about line ends.</td></tr><tr id="property-eol.mode"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">eol.mode</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The default EOL mode (characters that make up line ends) depends on your platform. You can overwrite this behaviour by setting the property to<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">LF for UNIX and OS X format<br>CR for Macintosh format prior to OS X<br>CRLF for DOS/Windows format</div></td></tr><tr id="property-eol.auto"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">eol.auto</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This setting overrides the eol.mode value and chooses the end of line character sequence based on the current contents of the file when it is opened. The line ending used the most in the file is chosen.</td></tr><tr id="property-blank.margin.left"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-blank.margin.right"></a><a name="property-output.blank.margin.left"></a>blank.margin.left<br>blank.margin.right<br>output.blank.margin.left</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">There is a blank margin on both sides of the text. It is drawn in the background colour of default text. This defaults to one pixel for both left and right sides but may be altered with these settings.<br>If output.blank.margin.left is set then it overrides blank.margin.left for the output pane.</td></tr><tr id="property-margin.width"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">margin.width</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting this to a number makes SciTE display a selection margin to the left of the text. The value is the number of pixels wide the selection margin should be. Line markers are displayed in the selection margin area.</td></tr><tr class="windowsonly" id="property-full.screen.hides.menu" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">full.screen.hides.menu</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting this to 1 hides the menu bar when the Full Screen command is used on Windows. On GTK+ the menu is always visible.</td></tr><tr class="windowsonly" id="property-minimize.to.tray" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">minimize.to.tray</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting this to 1 minimizes SciTE to the system tray rather than to the task bar.</td></tr><tr id="property-line.margin.visible"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-line.margin.width"></a>line.margin.visible<br>line.margin.width</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">SciTE is able to display a column of line numbers to the left of the selection margin. Setting line.margin.visible to 1 makes this column visible at startup. The line.margin.width property controls how much space is reserved for the line numbers, in terms of the number of digits that can be displayed. To specify that the margin should expand if needed to accommodate larger line numbers, add a '+' after the number of digits, e.g.&nbsp;<span class="example" style="color: rgb(0, 128, 0); font-weight: bold;">line.margin.width=3+</span>.</td></tr><tr id="property-tabbar.visible"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">tabbar.visible</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting tabbar.visible to 1 makes the tab bar visible at start up. The buffers property must be set to a value greater than 1 for this option to work.</td></tr><tr id="property-tabbar.hide.one"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">tabbar.hide.one</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting tabbar.hide.one to 1 hides the tab bar until there is more than one tab.</td></tr><tr id="property-tabbar.hide.index"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">tabbar.hide.index</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting tabbar.hide.index to 1 will hide the buffer number in tabs.</td></tr><tr class="windowsonly" id="property-tabbar.multiline" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">tabbar.multiline</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting tabbar.multiline uses multiple lines for the tab bar</td></tr><tr id="property-toolbar.visible"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">toolbar.visible</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting this to 1 makes the tool bar visible at start up.</td></tr><tr class="windowsonly" id="property-toolbar.large" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">toolbar.large</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting this to 1 makes the tool bar larger and use larger icons.</td></tr><tr class="gtkonly" id="property-toolbar.usestockicons" style="background: rgb(255, 255, 231);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">toolbar.usestockicons</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">SciTE has a built-in icon set for the toolbar, setting this to 1 makes SciTE more integrated in the GNOME desktop by using the icons provided by the current theme used in GNOME.</td></tr><tr class="gtkonly" id="property-pathbar.visible" style="background: rgb(255, 255, 231);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">pathbar.visible</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The path bar is a line of text under the tab bar showing the full path of the currently selected tab. Setting pathbar.visible to 1 makes the path bar visible on GTK+.</td></tr><tr id="property-undo.redo.lazy"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">undo.redo.lazy</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting this to 1 changes the technique used to determine when to enable or disable tool bar buttons to be less accurate. This may improve performance on slow machines.</td></tr><tr id="property-statusbar.visible"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">statusbar.visible</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting this to 1 makes the status bar visible at start up.</td></tr><tr id="property-statusbar.number"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-statusbar.text"></a>statusbar.number<br>statusbar.text.<i>number</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The statusbar.text.1 option defines the information displayed in the status bar by default on all platforms. Property values may be used in this text using the $() syntax. Commonly used properties are: ReadOnly, EOLMode, BufferLength, NbOfLines (in buffer), SelLength (chars), SelHeight (lines). Extra properties defined for the status bar are LineNumber, ColumnNumber, and OverType which is either "OVR" or "INS" depending on the overtype status. You can also use file properties, which, unlike those above, are not updated on each keystroke: FileName or FileNameExt, FileDate and FileTime and FileAttr. Plus CurrentDate and CurrentTime.<br>On Windows only, further texts may be set as statusbar.text.2 .. and these may be cycled between by clicking the status bar.<br>The statusbar.number option defines how many texts are to be cycled through.</td></tr><tr id="property-buffered.draw"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">buffered.draw</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting this to 1 rather than the default 0 may make SciTE draw output into a buffer bitmap first and then to the screen instead of directly to the screen. On old platforms and some unusual modes this can result in less flickering. but is slower.<br>Has no effect on OS X and may have no effect on other platforms or technology choices.</td></tr><tr id="property-two.phase.draw"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">phases.draw<br>two.phase.draw</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">There are several orders in which the text area may be drawn offering a trade-off between speed and allowing all pixels of text to be seen even when they overlap other elements. There may also be some flickering on some platforms with higher numbers of phases unless buffered drawing is turned on.<br>In single phase drawing (phases.draw=0) each run of characters in one style is drawn along with its background. If a character overhangs the end of a run, such as in "<i>V</i>_" where the "<i>V</i>" is in a different style from the "_", then this can cause the right hand side of the "<i>V</i>" to be overdrawn by the background of the "_" which cuts it off.<br>Two phase drawing (phases.draw=1) fixes this by drawing all the backgrounds of a line first and then drawing the text in transparent mode. Lines are drawn separately and no line will overlap another so any pixels that overlap into another line such as extreme ascenders and descenders on characters will be cut off.<br>Multiple phase drawing (phases.draw=2) draws the whole area multiple times, once for each feature, building up the the appearance in layers or phases. The coloured backgrounds for all lines are drawn before any text and then all the text is drawn in transparent mode over this combined background without clipping text to the line boundaries. This allows extreme ascenders and decenders to overflow into the adjacent lines. This mode is incompatible with buffered.draw so will be treated as phases.draw=1 when bufferd.draw=1.<br>The default is for drawing to be two phase.<br>The two.phase.draw property was used before multiple phase drawing was added and should be replaced with phases.draw.</td></tr><tr class="windowsonly" id="property-technology" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">technology</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">On Windows Vista or newer, this can be set to 1, 2 or 3 to use the Direct2D and DirectWrite APIs for higher quality antialiased drawing or 0 to use the older GDI. The default is 1. The value 2 causes the frame to be retained after presentation which may prevent drawing failures on some cards and drivers. 3 may also prevent drawing failures on some cards and drivers but with lower speed.</td></tr><tr id="property-load.on.activate"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-save.on.deactivate"></a>load.on.activate<br>save.on.deactivate</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The load.on.activate property causes SciTE to check whether the current file has been updated by another process whenever it is activated. This is useful when another editor such as a WYSIWYG HTML editor, is being used in conjunction with SciTE.<br>The save.on.deactivate property causes SciTE to save the file whenever the SciTE application loses focus. This is useful when developing web pages and you want to often check the appearance of the page in a browser.</td></tr><tr id="property-are.you.sure.on.reload"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">are.you.sure.on.reload</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">When both this and load.on.activate are set to 1, SciTE will ask if you really want to reload the modified file, giving you the chance to keep the file as it is. By default this property is disabled, causing SciTE to reload the file without bothering you.</td></tr><tr id="property-save.on.timer"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">save.on.timer</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The save.on.timer property causes SciTE to save modified files whenever there have been no modifications for the number of seconds specified by the property. When set to 0, the default, this feature is disabled and files are not automatically saved.</td></tr><tr id="property-reload.preserves.undo"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">reload.preserves.undo</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">When set to 1, reloading a file does not delete all the undo history. This is useful when load.on.activate is used in conjunction with filter commands.</td></tr><tr id="property-check.if.already.open"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">check.if.already.open</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This option allows opening files in an existing instance of SciTE rather than always opening a new instance. When this option is set and SciTE is started, it checks to see if there are any other instances of SciTE open. If there is, another instance is asked to open the file and become active and the new instance exits. On Windows, the instance with the Options | Open Files Here menu item checked opens the file. On GTK+, an arbitrary instance opens the file.</td></tr><tr id="property-read.only"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">read.only</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">When this option is set then opened documents are initially read only. New files are not affected by this setting.</td></tr><tr id="property-read.only.indicator"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">read.only.indicator</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If this option is set, SciTE indicates that the buffer is read only by adding a "pipe"-character (|) to the file name in the tab bar and in the buffer menu.</td></tr><tr id="property-background.open.size"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-background.save.size"></a>background.open.size<br>background.save.size</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This setting controls whether files are opened and saved without blocking the user interface while they are being read or written. Files larger than the given size in bytes will be read or written in the background while smaller files will be read or written directly and SciTE will not respond until the file access is completed. The default value is -1 allows background processing for all files. For saving, the size used is the in-memory size in bytes which will differ from the on-disk size when the UTF-16 encoding is used.</td></tr><tr class="windowsonly" id="property-temp.files.sync.load" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">temp.files.sync.load</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Files dropped on SciTE on Windows are normally opened asynchronously as there may be a long list. However, files dragged from some applications such as 7-Zip may only exist for a moment in the temporary directory and be deleted once the drop has occurred.<br>Setting this to 1 makes SciTE open dropped files in the temporary directory immediately.</td></tr><tr id="property-quit.on.close.last"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">quit.on.close.last</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If this option is set, SciTE will close when its last buffer has been closed, e.g. with File/Close. (By default, if this option is not set, SciTE will remain open and will create a new blank document when its last buffer is closed.)</td></tr><tr id="property-highlight.current.word"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">highlight.current.word</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">When set to 1, all occurrences of the selected word are highlighted with the colour defined by highlight.current.word.colour. By default, this option is disabled. (See indicators.alpha and indicators.under)</td></tr><tr id="property-highlight.current.word.indicator"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">highlight.current.word.indicator</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If set, defines the appearance of the current word highlight. This is a&nbsp;<a href="file:///E:/MODS/doc/SciTEDoc.html#IndicatorProperty">structured property</a>&nbsp;with multiple attributes similar to:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">highlight.current.word.indicator=style:roundbox,colour:#0080FF,under,outlinealpha:140,fillalpha:80</div></td></tr><tr id="property-highlight.current.word.colour"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">highlight.current.word.colour</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The option highlight.current.word.colour defines the colour of highlight. The default value is #A0A000.<br>Overridden by highlight.current.word.indicator.</td></tr><tr id="property-highlight.current.word.by.style"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">highlight.current.word.by.style</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If the option highlight.current.word.by.style is set, then only words with the same style are highlighted (e.g. if you select this word in a comment, then only occurrences of words in comments are selected).</td></tr><tr class="osxonly" id="property-spell.ignore" style="background: rgb(255, 231, 231);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">spell.ignore.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Specifies a list of words that should not be treated as spelling mistakes for a particular filepattern. For example, in HTML, tag names that are not words are common so turn off the spelling highlight with:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">spell.ignore.*.html=br ul toc valign blockquote kbd thead tr th tbody colspan</div>To turn spell checking completely off for a filepattern use the value *.</td></tr><tr class="osxonly" id="property-spell.mistake.indicator" style="background: rgb(255, 231, 231);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">spell.mistake.indicator</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If set, defines the appearance of spelling mistakes. This is a&nbsp;<a href="file:///E:/MODS/doc/SciTEDoc.html#IndicatorProperty">structured property</a>&nbsp;with multiple attributes similar to:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">spell.mistake.indicator=style:squigglepixmap,colour:#FF0000</div></td></tr><tr class="gtkonly" id="property-rectangular.selection.modifier" style="background: rgb(255, 255, 231);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">rectangular.selection.modifier</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">On GTK+, the modifier key used to make rectangular selections can be set with this property. Valid options are 2 (Ctrl), 4 (Alt) or 8 (Super). Super is often assigned to the Windows/Start key on Windows keyboards or the Command key on Mac keyboards.&nbsp;<br>Since the Alt key is often used by window managers to move windows, this will need to be configured off to use the combination in SciTE. This can be done for Metacity using gconf-editor to modify the /apps/metacity/general/mouse_button_modifier. A valid value here is &lt;Super&gt;.</td></tr><tr id="property-selection.fore"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-selection.back"></a><a name="property-selection.alpha"></a>selection.fore<br>selection.back<br>selection.alpha</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Sets the colours used for displaying selected text. If one of these is not set then that attribute is not changed for the selection. The default is to show the selection by changing the background to light grey and leaving the foreground the same as when it was not selected. The translucency of the selection is set with selection.alpha with an alpha of 256 turning translucency off.</td></tr><tr id="property-caret.fore"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">caret.fore</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Sets the colour used for the caret.</td></tr><tr id="property-selection.additional.fore"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-selection.additional.back"></a><a name="property-selection.additional.alpha"></a>selection.additional.fore<br>selection.additional.back<br>selection.additional.alpha</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Similar to selection.fore, selection.back, selection.alpha. Sets the colours used for displaying additional selections when multiple selections are enabled or a rectangular selection is made.</td></tr><tr id="property-caret.additional.blinks"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">caret.additional.blinks</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set whether all carets blink. 0 means only the main caret blinks. Default is 1.</td></tr><tr class="windowsonly" id="property-selection.always.visible" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">selection.always.visible</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to show the selection coloured even when SciTE is not the active application. Default is 0.</td></tr><tr id="property-caret.line.back"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-caret.line.back.alpha"></a>caret.line.back<br>caret.line.back.alpha</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Sets the background colour and translucency used for line containing the caret. Translucency ranges from 0 for completely transparent to 255 for opaque with 256 being opaque and not using translucent drawing code which may be slower.</td></tr><tr id="property-caret.period"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">caret.period</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Sets the rate at which the caret blinks. The value is the time in milliseconds that the caret is visible before it is switched to invisible. It then stays invisible for the same period before appearing again. A value of 0 stops the caret from blinking.</td></tr><tr id="property-caret.width"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">caret.width</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Sets the width of the caret in pixels. Only values of 1, 2, or 3 work.</td></tr><tr id="property-selection.rectangular.switch.mouse"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">selection.rectangular.switch.mouse</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Sets whether switching to rectangular selection mode while making a selection with the mouse is allowed (1) or not (0). Default is 0.</td></tr><tr id="property-selection.multiple"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-selection.additional.typing"></a>selection.multiple<br>selection.additional.typing<br>selection.multipaste</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set selection.multiple to make multiple selections with the mouse by holding down the Ctrl key.<br>Set selection.additional.typing to 1. to allow typing, backspace and delete to affect all selections including each line of rectangular selections. When set to 0, typing only affects the main selection.<br>Set selection.multipaste to 1 to paste at all selections. If set to 0, the paste will only be inserted at the last selection.</td></tr><tr id="property-virtual.space"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">virtual.space</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Determines whether the caret can be moved into virtual space, that is, beyond the last character on a line. Set to 1 to allow virtual space when making a rectangular selection, 2 to allow the arrow keys or a mouse click to move the caret into virtual space, and 3 to allow both. 4 may be added to prevent left arrow from wrapping to previous line.</td></tr><tr id="property-caret.policy.xslop"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-caret.policy.width"></a><a name="property-caret.policy.xstrict"></a><a name="property-caret.policy.xeven"></a><a name="property-caret.policy.xjumps"></a><a name="property-caret.policy.yslop"></a><a name="property-caret.policy.lines"></a><a name="property-caret.policy.ystrict"></a><a name="property-caret.policy.yeven"></a><a name="property-caret.policy.yjumps"></a>caret.policy.xslop<br>caret.policy.width<br>caret.policy.xstrict<br>caret.policy.xeven<br>caret.policy.xjumps<br><br>caret.policy.yslop<br>caret.policy.lines<br>caret.policy.ystrict<br>caret.policy.yeven<br>caret.policy.yjumps<br></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><p>If slop is set, we can define a slop value: width for xslop, lines for yslop.<br>This value defines an unwanted zone (UZ) where the caret is... unwanted.<br>This zone is defined as a number of pixels near the vertical margins, and as a number of lines near the horizontal margins.<br>By keeping the caret away from the edges, it is seen within its context, so it is likely that the identifier that the caret is on can be completely seen, and that the current line is seen with some of the lines following it which are often dependent on that line.</p><p>If strict is set, the policy is enforced... strictly.<br>The caret is centred on the display if slop is not set, and cannot go in the UZ if slop is set.</p><p>If jumps is set, the display is moved more energetically so the caret can move in the same direction longer before the policy is applied again.<br>'3UZ' notation is used to indicate three time the size of the UZ as a distance to the margin.</p><p>If even is not set, instead of having symmetrical UZs, the left and bottom UZs are extended up to right and top UZs respectively.<br>This way, we favour the displaying of useful information: the beginning of lines, where most code reside, and the lines after the caret, e.g., the body of a function.</p><p>See the table below to see how these settings interact.<br>Default: xslop, yslop, xeven, yeven=1, width=50, all others = 0.</p></td></tr><tr id="property-visible.policy.strict"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-visible.policy.slop"></a><a name="property-visible.policy.lines"></a>visible.policy.strict<br>visible.policy.slop<br>visible.policy.lines</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Determines how the display area is determined after a Go to command or equivalent such as a Find or Next Message. Options are similar to caret.policy.*.</td></tr><tr id="property-edge.mode"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-edge.column"></a><a name="property-edge.colour"></a>edge.mode<br>edge.column<br>edge.colour<br></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Indicates long lines. The default edge.mode, 0, does not indicate long lines. An edge.mode of 1 uses a vertical line to indicate the specified column and an edge.mode of 2 changes the background colour of characters beyond that column. For proportional fonts, an edge.mode of 2 is more useful than 1.</td></tr><tr id="property-control.char.symbol"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">control.char.symbol</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Sets the character to use to indicate control characters. If not set, control characters are shown as mnemonics.</td></tr><tr id="property-error.marker.fore"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-error.marker.back"></a>error.marker.fore<br>error.marker.back</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The colours used to indicate error and warning lines in both the edit and output panes are set with these two values. If there is a margin on a pane then a symbol is displayed in the margin to indicate the error message for the output pane or the line causing the error message for the edit pane. The error.marker.back is used as the fill colour of the symbol and the error.marker.fore as the outline colour. If there is no margin then the background to the line is set to the error.marker.back colour.</td></tr><tr id="property-error.inline"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-style.error.0"></a><a name="property-style.error.1"></a><a name="property-style.error.2"></a><a name="property-style.error.3"></a>error.inline<br>style.error.0<br>style.error.1<br>style.error.2<br>style.error.3</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">To see error messages interspersed with the source code, set error.inline=1.<br>Different visual styles are used for different severities: style.error.0 is the default; style.error.1 for warnings; style.error.2 for errors; and style.error.3 for fatal errors. The severity of a message is inferred from finding the text "warning", "error", or "fatal" in the message.</td></tr><tr id="property-bookmark.fore"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-bookmark.back"></a><a name="property-bookmark.alpha"></a>bookmark.fore<br>bookmark.back<br>bookmark.alpha</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The colours used to display bookmarks in the margin. If bookmark.fore is empty then a blue sphere is used. When the margin is turned off, bookmarks are shown by a change in the background colour of the line with the translucency set with bookmark.alpha.</td></tr><tr id="property-find.mark.indicator"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">find.mark.indicator</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If set, then the Mark All command in the Find dialog will draw indicators over each string found. This is a&nbsp;<a href="file:///E:/MODS/doc/SciTEDoc.html#IndicatorProperty">structured property</a>&nbsp;with multiple attributes similar to:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">find.mark.indicator=style:roundbox,colour:#0080FF,under,outlinealpha:140,fillalpha:80</div></td></tr><tr id="property-find.mark"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">find.mark</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If set, then the Mark All command in the Find dialog will draw translucent boxes over each string found. (See indicators.alpha and indicators.under)<br>Overridden by find.mark.indicator.</td></tr><tr id="property-indicators.alpha"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">indicators.alpha</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This property defines the alpha level for indicators (default value is 30). The alpha value can range from 0 (completely transparent) to 255 (no transparency). A value out of this range is ignored and the default one is used.<br>Will be overridden by specific indicator definitions such as find.mark.indicator.</td></tr><tr id="property-indicators.under"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">indicators.under</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If set, the indicators are drawn under text or over (by default, it is over).<br>Will be overridden by specific indicator definitions such as find.mark.indicator.</td></tr><tr id="property-error.select.line"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">error.select.line</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">When a command execution produces error messages, and you step with F4 key through the matching source lines, this option selects the line where the error occurs. Most useful if the error message contains the column of error too as the selection will start at the column of the error. The error message must contain the column and must be understood by SciTE (currently only supported for HTML Tidy). The tab size assumed by the external tool must match the tab size of your source file for correct column reporting.</td></tr><tr id="property-openpath"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">openpath.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Defines a path for the Open Selected Filename command in the File menu. The path is searched if the selected filename doesn't contain an absolute path or the file is not found in the document directory. The directories in openpath are separated by ';' on Windows and ':' on OS X and GTK+.<br>An openpath setting may look like:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">openpath.*.txt=c:\dos\;f:\;<br>openpath.$(file.patterns.cpp)=$(cpp_includes)</div></td></tr><tr id="property-open.suffix"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">open.suffix.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Defines a suffix to add to the selected file name for the Open Selected Filename command in the File menu. This is used in languages where the suffix is not given when accessing a file. An example is python where "import xlib" will most often mean to import from a file called "xlib.py".<br>An open.suffix setting may look like:<br><div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">open.suffix.*.py=.py</div></td></tr><tr id="property-strip.trailing.spaces"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">strip.trailing.spaces<br>strip.trailing.spaces.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Strips trailing white spaces from the file while saving.<br>The global strip.trailing.spaces property can be overridden for files that match a pattern by using the file pattern forms:&nbsp;<br><div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">strip.trailing.spaces.*.yaml=0<br>or&nbsp;<br>strip.trailing.spaces.$(file.patterns.yaml)=0<br></div></td></tr><tr id="property-ensure.final.line.end"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">ensure.final.line.end</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Ensures file ends with a line end when saved.</td></tr><tr id="property-ensure.consistent.line.ends"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">ensure.consistent.line.ends</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Ensures all lines end with the current Line End Characters setting when saved.</td></tr><tr id="property-abbreviations"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">abbreviations.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Loads an abbreviations file for a particular language overriding the default abbreviations file. For example,<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">abbreviations.*.c=$(SciteUserHome)/c_abbrev.properties<br></div></td></tr><tr id="property-api"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">api.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Loads a set of API files for a particular language. If there is more than one API file then the file names are separated by ';'. API files contain a sorted list of identifiers and function prototypes, one per line. If there are multiple files then each file should end with a line end or the next file's first line will merge with the previous file's last line. The "Complete Symbol" command looks at the characters before the caret and displayed the subset of the API file starting with that string. When an opening brace is typed, the file is searched for the text preceding the caret and if a function prototype is found then it is displayed as a calltip. For example, the setting<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">api.*.c=w.api<br></div>could be used with a w.api file containing<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">fclose(FILE* fileClose)<br>FILE<br>fopen(const char* szFileName, const char* szMode)<br>fpos_t<br>fread(void* buf, size_t size, size_t count, FILE* file)<br>fseek(FILE* file, long lnOffset, int nOrigin)<br></div>to provide autocompletion and calltips for some of the C file functions. It is best to use the full path to the API file as otherwise the current directory is used. See the Creating API files section for ways to create API files.</td></tr><tr id="property-autocomplete.choose.single"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">autocomplete.choose.single</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">When set to 1 and an autocompletion list is invoked and there is only one element in that list then that element is automatically chosen. This means that the matched element is inserted and the list is not displayed.</td></tr><tr id="property-autocomplete.*.ignorecase"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">autocomplete.<i>lexer</i>.ignorecase<br>autocomplete.*.ignorecase</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">When set to 1 the API file is searched in a case insensitive way to find elements for autocompletion lists. Otherwise matches only occur if case also matches. The * form is used if there is no lexer specific setting.</td></tr><tr id="property-autocomplete.*.start.characters"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">autocomplete.<i>lexer</i>.start.characters<br>autocomplete.*.start.characters</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If this setting is not empty, typing any of the characters will cause autocompletion to start. For example, if autocomplete.python.start.characters=. and the API file for Python contains "string.rjust" and "string.replace" then typing "string." will cause the autocompletion to display both identifiers. The * form is used if there is no lexer specific setting.</td></tr><tr id="property-autocomplete.*.fillups"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">autocomplete.<i>lexer</i>.fillups<br>autocomplete.*.fillups</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If this setting is not empty, typing any of the characters will cause autocompletion to complete. For example, if autocomplete.python.fillups=( and the API file for Python contains "string.replace" then typing "string.r(" will cause "string.replace(" to be inserted. The * form is used if there is no lexer specific setting.</td></tr><tr id="property-autocomplete.*.typesep"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">autocomplete.<i>lexer</i>.typesep<br>autocomplete.*.typesep</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If this setting is not empty, it specifies the character used to separate autocompletion choices from type icon IDs. The default value is '?'.</td></tr><tr id="property-autocompleteword.automatic"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">autocompleteword.automatic</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If this setting is 1 then when typing a word, if only one word in the document starts with that string then an autocompletion list is displayed with that word so it can be chosen by pressing Tab.</td></tr><tr id="property-calltip.*.ignorecase"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">calltip.<i>lexer</i>.ignorecase<br>calltip.*.ignorecase</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">When set to 1 the API file is searched in a case insensitive way to find the function which will have its signature displayed as a calltip. The * form is used if there is no lexer specific setting.</td></tr><tr id="property-calltip.*.use.escapes"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">calltip.<i>lexer</i>.use.escapes<br>calltip.*.use.escapes</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">When set to 1 the API file may contain C style backslash escapes which are listed in the command line arguments section. The * form is used if there is no lexer specific setting.</td></tr><tr id="property-calltip.*.word.characters"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">calltip.<i>lexer</i>.word.characters<br>calltip.*.word.characters</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">To determine the identifier to look up for calltips, a search is performed allowing the characters in this set to be included in the identifier. While the same setting can be used as for word.characters, sometimes additional characters may be allowed. For example, in Python, '.' is not normally considered part of a word when selecting text, but it is good to allow "string.replace" to show a calltip so calltip.python.word.characters=._$(chars.alpha) would be a reasonable setting. The * form is used if there is no lexer specific setting.</td></tr><tr id="property-calltip.*.parameters.start"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-calltip.*.parameters.end"></a><a name="property-calltip.*.parameters.separators"></a>calltip.<i>lexer</i>.parameters.start<br>calltip.<i>lexer</i>.parameters.end<br>calltip.<i>lexer</i>.parameters.separators<br>calltip.*.parameters.start<br>calltip.*.parameters.end<br>calltip.*.parameters.separators</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Allows you to specify characters which start, end and separate parameters. For most common languages, it's usually left brace for start, right brace for end and comma or semicolon for separator. E.g. CSS has colon for start, space for separator and nothing for end. You can specify more characters for each property. The * form is used if there is no lexer specific setting.</td></tr><tr id="property-calltip.*.end.definition"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">calltip.<i>lexer</i>.end.definition<br>calltip.*.end.definition</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">API files may contain explanatory text after each function definition. To display the explanation on a second line, set this property to the character used at the end of the definition part. For most languages, this is ')'. The * form is used if there is no lexer specific setting.</td></tr><tr id="property-xml.auto.close.tags"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">xml.auto.close.tags</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">For XML and HTML, setting this property to 1 will automatically insert the corresponding end tag when '&gt;' is typed to end a start tag. Type "&lt;td&gt;" and the result will be "&lt;td&gt;&lt;/td&gt;" with the caret placed between the tags.</td></tr><tr id="property-asp.default.language"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">asp.default.language</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Script in ASP code is initially assumed to be in JavaScript. To change this to VBScript set asp.default.language to 2. Python is 3.</td></tr><tr id="property-fold.abl.comment.multiline"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.abl.comment.multiline</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 0 to disable folding multi-line comments when fold.comment=1.</td></tr><tr id="property-fold.abl.syntax.based"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.abl.syntax.based</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 0 to disable syntax based folding.</td></tr><tr id="property-fold.asm.comment.explicit"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.asm.comment.explicit</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This option enables folding explicit fold points when using the Asm lexer. Explicit fold points allows adding extra folding by placing a ;{ comment at the start and a ;} at the end of a section that should fold.</td></tr><tr id="property-fold.asm.comment.multiline"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.asm.comment.multiline</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 1 to enable folding multi-line comments.</td></tr><tr id="property-fold.asm.explicit.anywhere"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.asm.explicit.anywhere</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 1 to enable explicit fold points anywhere, not just in line comments.</td></tr><tr id="property-fold.asm.explicit.end"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.asm.explicit.end</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The string to use for explicit fold end points, replacing the standard ;}.</td></tr><tr id="property-fold.asm.explicit.start"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.asm.explicit.start</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The string to use for explicit fold start points, replacing the standard ;{.</td></tr><tr id="property-fold.asm.syntax.based"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.asm.syntax.based</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 0 to disable syntax based folding.</td></tr><tr id="property-fold.at.else"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.at.else</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This option enables C++ folding on a "} else {" line of an if statement.</td></tr><tr id="property-fold.baan.inner.level"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.baan.inner.level</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 1 to enable folding of inner levels of select statements.Disabled by default. case and if statements are also eligible</td></tr><tr id="property-fold.baan.keywords.based"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.baan.keywords.based</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 0 to disable keywords based folding, which is folding based on for, if, on (case), repeat, select, while and fold ends based on endfor, endif, endcase, until, endselect, endwhile respectively.Also folds declarations which are grouped together.</td></tr><tr id="property-fold.baan.sections"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.baan.sections</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 0 to disable folding of Main Sections as well as Sub Sections.</td></tr><tr id="property-fold.baan.syntax.based"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.baan.syntax.based</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 0 to disable syntax based folding, which is folding based on '{' &amp; '('.</td></tr><tr id="property-fold.basic.comment.explicit"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.basic.comment.explicit</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This option enables folding explicit fold points when using the Basic lexer. Explicit fold points allows adding extra folding by placing a ;{ (BB/PB) or '{ (FB) comment at the start and a ;} (BB/PB) or '} (FB) at the end of a section that should be folded.</td></tr><tr id="property-fold.basic.explicit.anywhere"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.basic.explicit.anywhere</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 1 to enable explicit fold points anywhere, not just in line comments.</td></tr><tr id="property-fold.basic.explicit.end"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.basic.explicit.end</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The string to use for explicit fold end points, replacing the standard ;} (BB/PB) or '} (FB).</td></tr><tr id="property-fold.basic.explicit.start"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.basic.explicit.start</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The string to use for explicit fold start points, replacing the standard ;{ (BB/PB) or '{ (FB).</td></tr><tr id="property-fold.basic.syntax.based"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.basic.syntax.based</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 0 to disable syntax based folding.</td></tr><tr id="property-fold.comment"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.comment</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This option enables folding multi-line comments and explicit fold points when using the C++ lexer. Explicit fold points allows adding extra folding by placing a //{ comment at the start and a //} at the end of a section that should fold.</td></tr><tr id="property-fold.cpp.comment.explicit"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.cpp.comment.explicit</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 0 to disable folding explicit fold points when fold.comment=1.</td></tr><tr id="property-fold.cpp.comment.multiline"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.cpp.comment.multiline</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 0 to disable folding multi-line comments when fold.comment=1.</td></tr><tr id="property-fold.cpp.explicit.anywhere"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.cpp.explicit.anywhere</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 1 to enable explicit fold points anywhere, not just in line comments.</td></tr><tr id="property-fold.cpp.explicit.end"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.cpp.explicit.end</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The string to use for explicit fold end points, replacing the standard //}.</td></tr><tr id="property-fold.cpp.explicit.start"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.cpp.explicit.start</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The string to use for explicit fold start points, replacing the standard //{.</td></tr><tr id="property-fold.cpp.preprocessor.at.else"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.cpp.preprocessor.at.else</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This option enables folding on a preprocessor #else or #endif line of an #if statement.</td></tr><tr id="property-fold.cpp.syntax.based"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.cpp.syntax.based</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 0 to disable syntax based folding.</td></tr><tr id="property-fold.d.comment.explicit"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.d.comment.explicit</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 0 to disable folding explicit fold points when fold.comment=1.</td></tr><tr id="property-fold.d.comment.multiline"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.d.comment.multiline</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 0 to disable folding multi-line comments when fold.comment=1.</td></tr><tr id="property-fold.d.explicit.anywhere"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.d.explicit.anywhere</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 1 to enable explicit fold points anywhere, not just in line comments.</td></tr><tr id="property-fold.d.explicit.end"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.d.explicit.end</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The string to use for explicit fold end points, replacing the standard //}.</td></tr><tr id="property-fold.d.explicit.start"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.d.explicit.start</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The string to use for explicit fold start points, replacing the standard //{.</td></tr><tr id="property-fold.d.syntax.based"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.d.syntax.based</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 0 to disable syntax based folding.</td></tr><tr id="property-fold.haskell.imports"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.haskell.imports</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to enable folding of import declarations</td></tr><tr id="property-fold.html"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.html</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Folding is turned on or off for HTML and XML files with this option. The fold option must also be on for folding to occur.</td></tr><tr id="property-fold.html.preprocessor"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.html.preprocessor</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Folding is turned on or off for scripts embedded in HTML files with this option. The default is on.</td></tr><tr id="property-fold.hypertext.comment"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.hypertext.comment</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Allow folding for comments in scripts embedded in HTML. The default is off.</td></tr><tr id="property-fold.hypertext.heredoc"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.hypertext.heredoc</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Allow folding for heredocs in scripts embedded in HTML. The default is off.</td></tr><tr id="property-fold.perl.at.else"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.perl.at.else</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This option enables Perl folding on a "} else {" line of an if statement.</td></tr><tr id="property-fold.perl.comment.explicit"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.perl.comment.explicit</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 0 to disable explicit folding.</td></tr><tr id="property-fold.perl.package"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.perl.package</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 0 to disable folding packages when using the Perl lexer.</td></tr><tr id="property-fold.perl.pod"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.perl.pod</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 0 to disable folding Pod blocks when using the Perl lexer.</td></tr><tr id="property-fold.preprocessor"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.preprocessor</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This option enables folding preprocessor directives when using the C++ lexer. Includes C#'s explicit #region and #endregion folding directives.</td></tr><tr id="property-fold.quotes.python"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.quotes.python</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This option enables folding multi-line quoted strings when using the Python lexer.</td></tr><tr id="property-fold.rust.comment.explicit"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.rust.comment.explicit</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 0 to disable folding explicit fold points when fold.comment=1.</td></tr><tr id="property-fold.rust.comment.multiline"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.rust.comment.multiline</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 0 to disable folding multi-line comments when fold.comment=1.</td></tr><tr id="property-fold.rust.explicit.anywhere"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.rust.explicit.anywhere</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 1 to enable explicit fold points anywhere, not just in line comments.</td></tr><tr id="property-fold.rust.explicit.end"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.rust.explicit.end</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The string to use for explicit fold end points, replacing the standard //}.</td></tr><tr id="property-fold.rust.explicit.start"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.rust.explicit.start</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The string to use for explicit fold start points, replacing the standard //{.</td></tr><tr id="property-fold.rust.syntax.based"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.rust.syntax.based</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set this property to 0 to disable syntax based folding.</td></tr><tr id="property-fold.sql.at.else"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.sql.at.else</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This option enables SQL folding on a "ELSE" and "ELSIF" line of an IF statement.</td></tr><tr id="property-fold.verilog.flags"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.verilog.flags</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This option enables folding module definitions. Typically source files contain only one module definition so this option is somewhat useless.</td></tr><tr id="property-html.tags.case.sensitive"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">html.tags.case.sensitive</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">For XML and HTML, setting this property to 1 will make tags match in a case sensitive way which is the expected behaviour for XML and XHTML.</td></tr><tr id="property-lexer.asm.comment.delimiter"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.asm.comment.delimiter</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Character used for COMMENT directive's delimiter, replacing the standard "~".</td></tr><tr id="property-lexer.baan.styling.within.preprocessor"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.baan.styling.within.preprocessor</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">For Baan code, determines whether all preprocessor code is styled in the preprocessor style (0, the default) or only from the initial # to the end of the command word(1).</td></tr><tr id="property-lexer.cpp.allow.dollars"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.cpp.allow.dollars</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 0 to disallow the '$' character in identifiers with the cpp lexer.</td></tr><tr id="property-lexer.cpp.backquoted.strings"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.cpp.backquoted.strings</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to enable highlighting of back-quoted raw strings .</td></tr><tr id="property-lexer.cpp.escape.sequence"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.cpp.escape.sequence</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to enable highlighting of escape sequences in strings</td></tr><tr id="property-lexer.cpp.hashquoted.strings"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.cpp.hashquoted.strings</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to enable highlighting of hash-quoted strings.</td></tr><tr id="property-lexer.cpp.track.preprocessor"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.cpp.track.preprocessor</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to interpret #if/#else/#endif to grey out code that is not active.</td></tr><tr id="property-lexer.cpp.triplequoted.strings"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.cpp.triplequoted.strings</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to enable highlighting of triple-quoted strings.</td></tr><tr id="property-lexer.cpp.update.preprocessor"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.cpp.update.preprocessor</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to update preprocessor definitions when #define found.</td></tr><tr id="property-lexer.cpp.verbatim.strings.allow.escapes"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.cpp.verbatim.strings.allow.escapes</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to allow verbatim strings to contain escape sequences.</td></tr><tr id="property-lexer.css.hss.language"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.css.hss.language</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 for HSS (.hss)</td></tr><tr id="property-lexer.css.less.language"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.css.less.language</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 for Less CSS (.less)</td></tr><tr id="property-lexer.css.scss.language"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.css.scss.language</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 for Sassy CSS (.scss)</td></tr><tr id="property-lexer.d.fold.at.else"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.d.fold.at.else</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This option enables D folding on a "} else {" line of an if statement.</td></tr><tr id="property-lexer.errorlist.escape.sequences"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.errorlist.escape.sequences</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to interpret escape sequences.</td></tr><tr id="property-lexer.errorlist.value.separate"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.errorlist.value.separate</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">For lines in the output pane that are matches from Find in Files or GCC-style diagnostics, style the path and line number separately from the rest of the line with style 21 used for the rest of the line. This allows matched text to be more easily distinguished from its location.</td></tr><tr id="property-lexer.flagship.styling.within.preprocessor"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.flagship.styling.within.preprocessor</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">For Harbour code, determines whether all preprocessor code is styled in the preprocessor style (0) or only from the initial # to the end of the command word(1, the default). It also determines how to present text, dump, and disabled code.</td></tr><tr id="property-lexer.haskell.allow.hash"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.haskell.allow.hash</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 0 to disallow the '#' character at the end of identifiers and literals with the haskell lexer (GHC -XMagicHash extension)</td></tr><tr id="property-lexer.haskell.allow.questionmark"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.haskell.allow.questionmark</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to allow the '?' character at the start of identifiers with the haskell lexer (GHC &amp; Hugs -XImplicitParams extension)</td></tr><tr id="property-lexer.haskell.allow.quotes"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.haskell.allow.quotes</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 0 to disable highlighting of Template Haskell name quotations and promoted constructors (GHC -XTemplateHaskell and -XDataKinds extensions)</td></tr><tr id="property-lexer.haskell.cpp"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.haskell.cpp</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 0 to disable C-preprocessor highlighting (-XCPP extension)</td></tr><tr id="property-lexer.haskell.import.safe"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.haskell.import.safe</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 0 to disallow "safe" keyword in imports (GHC -XSafe, -XTrustworthy, -XUnsafe extensions)</td></tr><tr id="property-lexer.html.django"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.html.django</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to enable the django template language.</td></tr><tr id="property-lexer.html.mako"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.html.mako</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to enable the mako template language.</td></tr><tr id="property-lexer.json.allow.comments"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.json.allow.comments</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to enable highlighting of line/block comments in JSON</td></tr><tr id="property-lexer.json.escape.sequence"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.json.escape.sequence</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to enable highlighting of escape sequences in strings</td></tr><tr id="property-lexer.props.allow.initial.spaces"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.props.allow.initial.spaces</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">For properties files, set to 0 to style all lines that start with whitespace in the default style. This is not suitable for SciTE .properties files which use indentation for flow control but can be used for RFC2822 text where indentation is used for continuation lines.</td></tr><tr id="property-lexer.python.keywords2.no.sub.identifiers"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.python.keywords2.no.sub.identifiers</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">When enabled, it will not style keywords2 items that are used as a sub-identifier. Example: when set, will not highlight "foo.open" when "open" is a keywords2 item.</td></tr><tr id="property-lexer.python.literals.binary"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.python.literals.binary</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 0 to not recognise Python 3 binary and octal literals: 0b1011 0o712.</td></tr><tr id="property-lexer.python.strings.b"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.python.strings.b</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 0 to not recognise Python 3 bytes literals b"x".</td></tr><tr id="property-lexer.python.strings.f"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.python.strings.f</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 0 to not recognise Python 3.6 f-string literals f"var={var}".</td></tr><tr id="property-lexer.python.strings.over.newline"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.python.strings.over.newline</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to allow strings to span newline characters.</td></tr><tr id="property-lexer.python.strings.u"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.python.strings.u</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 0 to not recognise Python Unicode literals u"x" as used before Python 3.</td></tr><tr id="property-lexer.python.unicode.identifiers"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.python.unicode.identifiers</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 0 to not recognise Python 3 unicode identifiers.</td></tr><tr id="property-lexer.rust.fold.at.else"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.rust.fold.at.else</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This option enables Rust folding on a "} else {" line of an if statement.</td></tr><tr id="property-lexer.sql.allow.dotted.word"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.sql.allow.dotted.word</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to colourise recognized words with dots (recommended for Oracle PL/SQL objects).</td></tr><tr id="property-lexer.sql.numbersign.comment"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.sql.numbersign.comment</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If "lexer.sql.numbersign.comment" property is set to 0 a line beginning with '#' will not be a comment.</td></tr><tr id="property-lexer.verilog.allupperkeywords"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.verilog.allupperkeywords</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to style identifiers that are all uppercase as documentation keyword.</td></tr><tr id="property-lexer.verilog.fold.preprocessor.else"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.verilog.fold.preprocessor.else</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This option enables folding on `else and `elsif preprocessor directives.</td></tr><tr id="property-lexer.verilog.portstyling"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.verilog.portstyling</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to style input, output, and inout ports differently from regular keywords.</td></tr><tr id="property-lexer.verilog.track.preprocessor"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.verilog.track.preprocessor</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to interpret `if/`else/`endif to grey out code that is not active.</td></tr><tr id="property-lexer.verilog.update.preprocessor"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.verilog.update.preprocessor</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to update preprocessor definitions when `define, `undef, or `undefineall found.</td></tr><tr id="property-lexer.xml.allow.scripts"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.xml.allow.scripts</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 0 to disable scripts in XML.</td></tr><tr id="property-sql.backslash.escapes"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">sql.backslash.escapes</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Enables backslash as an escape character in SQL.</td></tr><tr id="property-styling.within.preprocessor"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">styling.within.preprocessor</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">For C++ code, determines whether all preprocessor code is styled in the preprocessor style (0, the default) or only from the initial # to the end of the command word(1).</td></tr><tr id="property-tab.timmy.whinge.level"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">tab.timmy.whinge.level</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">For Python code, checks whether indenting is consistent. The default, 0 turns off indentation checking, 1 checks whether each line is potentially inconsistent with the previous line, 2 checks whether any space characters occur before a tab character in the indentation, 3 checks whether any spaces are in the indentation, and 4 checks for any tab characters in the indentation. 1 is a good level to use.</td></tr><tr id="property-user.shortcuts"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">user.shortcuts</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Define keys that perform commands. This is a '|' delimited list of keys and the commands they produce. The commands are either&nbsp;<a href="file:///E:/MODS/doc/CommandValues.html">string or numeric IDs</a>. Numeric IDs above 2000 are Scintilla commands and are sent to the focussed pane. Named IDs and numeric IDs below 2000 are SciTE menu commands. The modifiers are Ctrl, Shift, Alt, and Super and the named keys are Left, Right, Up, Down, Insert, End, Home, Enter, Space, Tab, KeypadPlus, KeypadMinus, KeypadMultiply, KeypadDivide, Escape, Delete, PageUp, PageDown, Slash, Question, Equal, Win.&nbsp;<br>On OS X the command key uses the modifier Ctrl+ as this eases using one setting between platforms and the control key uses the modifier Control+.&nbsp;<br>The Super modifier can be used only on GTK+.&nbsp;<br><div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">user.shortcuts=\<br>Ctrl+Shift+I|IDM_OPEN|\<br>Ctrl+Shift+Left|IDM_CLOSE|<br></div>This property is only read at start up.&nbsp;<br></td></tr><tr id="property-user.context.menu"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">user.context.menu</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Define additional commands for the context menu. This is a '|' delimited list of menu items and the commands they produce with commands defined as in user.shortcuts. An empty item produces a separator.&nbsp;<br><div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">user.context.menu=\<br>||\<br>Next File|IDM_NEXTFILE|\<br>Prev File|IDM_PREVFILE|<br></div></td></tr><tr id="property-magnification"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-output.magnification"></a>magnification<br>output.magnification</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Sets the initial magnification factor of the edit and output panes. This is useful when you want to change the size of text globally, such as after changing the screen resolution without having to touch every style setting. 0 is default, negative values makes the size smaller and positive values make it larger.</td></tr><tr id="property-split.vertical"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-output.horizontal.size"></a><a name="property-output.vertical.size"></a><a name="property-output.initial.hide"></a>split.vertical<br>output.horizontal.size<br>output.vertical.size<br>output.initial.hide</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If split.vertical is set to 1 then the output pane is to the right of the editing pane, if set to 0 then the output pane is below the editing pane. The output.*.size settings determine the initial size of the output pane. If output.initial.hide is 1, then the output pane is hidden when SciTE first starts up even when output.*.size is set; otherwise the output pane is shown at startup.</td></tr><tr class="gtkonly" id="property-split.wide" style="background: rgb(255, 255, 231);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">split.wide</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">On GTK+, the divider between the edit and output pane can be made wider by setting split.wide to 1. This makes it easier to grab with the mouse but uses up room. This property is only read at start up.</td></tr><tr id="property-clear.before.execute"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">clear.before.execute</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If set to 1 then the output pane is cleared before any tool commands are run.</td></tr><tr id="property-horizontal.scrollbar"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-horizontal.scroll.width"></a><a name="property-horizontal.scroll.width.tracking"></a><a name="property-output.horizontal.scrollbar"></a><a name="property-output.horizontal.scroll.width"></a><a name="property-output.horizontal.scroll.width.tracking"></a><a name="property-output.scroll"></a><a name="property-end.at.last.line"></a>horizontal.scrollbar<br>horizontal.scroll.width<br>horizontal.scroll.width.tracking<br>output.horizontal.scrollbar<br>output.horizontal.scroll.width<br>output.horizontal.scroll.width.tracking<br>output.scroll<br>end.at.last.line</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If horizontal.scrollbar set to 0 then the edit pane's horizontal scrollbar is not displayed.<br>horizontal.scroll.width is the document width assumed for scrolling.<br>Similarly, output.horizontal.scrollbar and output.horizontal.scroll.width controls the horizontal scroll bar of the output pane.<br>The horizontal scroll bar widths can automatically grow as needed to ensure all displayed lines can be fully scrolled with horizontal.scroll.width.tracking and output.horizontal.scroll.width.tracking.<br>To stop the output pane from automatically scrolling, set output.scroll to 0. To have the output pane scroll and return back to the line of the executed command, set output.scroll to 1. If you want the output pane to scroll and remain at the bottom after execution, set output.scroll to 2.<br>The vertical scroll range is normally set so that maximum scroll position has the last line at the bottom of the view. Set end.at.last.line to 0 to allow scrolling one page below the last line.</td></tr><tr id="property-wrap"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-output.wrap"></a>wrap<br>output.wrap</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If wrap set to 1 then the edit pane is dynamically line wrapped. If output.wrap set to 1 then the output pane is dynamically line wrapped. These options have a high performance cost which is proportional to the amount of text so should be turned off for large documents on slow machines.</td></tr><tr id="property-wrap.style"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">wrap.style</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Chooses between word wrapping (1, the default) and character wrapping (2). Character wrapping is a better choice for Asian languages with no spaces between words.</td></tr><tr id="property-wrap.visual.flags"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">wrap.visual.flags</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Flags to display markers at end and begin of wrapped lines for visual identify them. Set to 0 to not display markers (default). Set to 1 to display markers at end of wrapped lines, to 2 to display markers at begin of wrapped lines and to 3 to display markers at begin and end.</td></tr><tr id="property-wrap.visual.flags.location"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">wrap.visual.flags.location</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Flags to set the location of the display markers (if enabled) near to text or near to border. Set to 0 to have begin and end markers near to border (default). Set to 1 to have end markers near text, to 2 to have begin markers near text and to 3 to have all markers near text.</td></tr><tr id="property-wrap.indent.mode"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">wrap.indent.mode</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Wrapped sublines can be indented in various ways relative to the initial subline. Default mode 0 indents sublines to the left of window plus wrap.visual.startindent. Mode 1 aligns sublines to the first subline. Mode 2 aligns sublines to the first subline plus one more level of indentation.</td></tr><tr id="property-wrap.visual.startindent"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">wrap.visual.startindent</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Sets the indention of continued wrapped lines to better visually identify the wrapping. Default is 0 (no indention). Note if wrap.visual.flags is 2 or 3 (begin marker displayed) the line is indented at least 1, even if wrap.visual.startindent is still 0.</td></tr><tr id="property-wrap.aware.home.end.keys"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">wrap.aware.home.end.keys</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This property changes the behaviour of the home and end keys when dynamic line wrapping is turned on. When set to 0 (the default), the Home and End keys will move the caret to the very beginning / end of the 'logical' line, whether or not the line is wrapped over multiple lines in the display. When this property is set to 1, the caret moves to the end of the current 'display' line if you press End once, or to the very end of the 'logical' line if you press End again. Likewise, the Home key moves first to the beginning of the 'display' line, then on to the very beginning of the line. In a pane where dynamic line-wrapping is not enabled, this setting has no effect.</td></tr><tr id="property-idle.styling"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-output.idle.styling"></a>idle.styling<br>output.idle.styling</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">By default (0), syntax styling is performed for all the currently visible text before displaying it. On very large files, this may make scrolling down slow. With idle.styling=1, a small amount of styling is performed before display and then further styling is performed incrementally in the background. This may result in the text initially appearing uncoloured and then, some time later, it is coloured. Text after the currently visible portion may be styled in the background with 2. To style both before and after the visible text in the background use the value 3. output.idle.styling is the equivalent setting for the output pane.</td></tr><tr id="property-cache.layout"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-output.cache.layout"></a>cache.layout<br>output.cache.layout</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">A large proportion of the time spent in the editor is used to lay out text prior to drawing it. This information often stays static between repaints so can be cached with these settings. There are four levels of caching. 0 is no caching, 1 caches the line that the caret is on, 2 caches the visible page as well as the caret, and 3 caches the whole document. The more that is cached, the greater the amount of memory used, with 3 using large amounts of memory, 7 times the size of the text in the document. However, level 3 dramatically speeds up dynamic wrapping by around 25 times on large source files so is a very good option to use when wrapping is turned on and memory is plentiful.</td></tr><tr id="property-open.filter"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">open.filter</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This is a complex expression used for determining the file types that will be available in the open file dialog. For each type of file, there is some explanatory text, a '|' character, some file patterns, and another '|' character. These file types appear in the "Files of type:" pull down. The first item is the default, so you may wish to change the first item to include the file types you commonly open. The default value for this setting is built up by combining some specific settings for "All Source" and "All Files" with all the&nbsp;<a href="file:///E:/MODS/doc/SciTEDoc.html#property-star-filter">*filter</a>&nbsp;settings. The "All Source" item uses a set of file patterns which combines all the&nbsp;<a href="file:///E:/MODS/doc/SciTEDoc.html#property-star-source.patterns">*source.patterns</a>&nbsp;settings.&nbsp;<br></td></tr><tr class="windowsonly" id="property-save.filter" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">save.filter</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This is a complex expression used for determining the file types that will be available in the save file dialog. The structure of the property is the same as open.filter.<br>Does not work on GTK+.</td></tr><tr id="property-star-source.patterns"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">*source.patterns.<i>name</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set a value to be included in the set of file extensions used for the "All Source" pull down menu item in the Open dialog when using the default value for&nbsp;<a href="file:///E:/MODS/doc/SciTEDoc.html#property-open.filter">open.filter</a>. For example,&nbsp;<span class="example" style="color: rgb(0, 128, 0); font-weight: bold;">*source.patterns.ruby=*.rb;*.rbw;</span>&nbsp;adds the file patterns *.rb and *.rbw to the set of source extensions.</td></tr><tr id="property-star-filter"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">*filter.<i>name</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set a value to be included in the file type pull down menu in the Open dialog when using the default value for&nbsp;<a href="file:///E:/MODS/doc/SciTEDoc.html#property-open.filter">open.filter</a>. For example,&nbsp;<span class="example" style="color: rgb(0, 128, 0); font-weight: bold;">*filter.ruby=Ruby (rb rbw)|*.rb;*.rbw|</span>&nbsp;adds a "Ruby" item to the file type pull down menu. Selecting that item will show files that match the patterns *.rb and *.rbw. There must be 2 '|' characters in the setting.</td></tr><tr id="property-max.file.size"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">max.file.size</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">To avoid accidentally loading huge files on slow media, or just to ensure SciTE is used only to edit human readable code, the user can set the max.file.size property to specify a limit to file loading. If unset or set to 0, there is no limit. If set to a given size in bytes and if a file to load exceeds this limit, the user is asked if the file should be loaded. If accepted, the file is read as usual. If rejected then no action is taken (no file loaded, no buffer created).</td></tr><tr id="property-save.deletes.first"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">save.deletes.first</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Causes files to be deleted before being opened for saving. Can be used to ensure saving under a different capitalisation changes the files capitalisation rather than silently using the old capitalisation.</td></tr><tr id="property-save.check.modified.time"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">save.check.modified.time</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">With save.check.modified.time=1, when saving and the file has been modified by another process, check if it should be overwritten by the current contents.</td></tr><tr id="property-save.session"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-save.recent"></a><a name="property-save.position"></a>save.session<br>save.recent<br>save.position<br>save.find</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If you set save.session, the list of currently opened buffers will be saved on exit in a session file. When you start SciTE next time (without specifying a file name on the command line) the last session will be restored automatically.<br><b>For GTK+</b>, the file is called ".SciTE.session" and is located in the directory given by the SciTE_USERHOME environment variable and if that is not set, the value of the SciTE_HOME environment variable and if that is not set, the value of the HOME environment variable and if that is not set, the top level directory.<br><b>For Windows</b>, the file is called "SciTE.session" and is located in the directory given by the SciTE_USERHOME environment variable and if that is not set, the value of the SciTE_HOME environment variable and if that is not set, the value of the USERPROFILE environment variable and if that is not set, the directory of the SciTE executable.<br>Setting save.recent causes the most recently used files list to be saved on exit in the session file and read at start up.<br>Setting save.position causes the SciTE window position on the desktop to be saved on exit in the session file and restored at start up.<br>Setting save.find cause the "Find what" and "Replace with" to be saved in the session file.</td></tr><tr id="property-session.bookmarks"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-session.folds"></a>session.bookmarks<br>session.folds</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting session.bookmarks causes bookmarks to be saved in session files. If you set session.folds then the folding state will be saved in session files. When loading a session file bookmarks and/or folds are restored. Folding states are not restored if fold.on.open is set.</td></tr><tr class="windowsonly" id="property-open.dialog.in.file.directory" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">open.dialog.in.file.directory</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting open.dialog.in.file.directory causes the open dialog to initially display the same directory as the current file. If it is not set then the system default is used.</td></tr><tr class="windowsonly" id="property-find.close.on.find" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">find.close.on.find</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set find.close.on.find to 0, 1 or 2 to prevent (0) or allow (1) closing the the find strip automatically when the Find button is pressed. The value 2 causes the strip to close automatically only when the search finds a match which enables the user to change options or search string if a mistake was made. The default value is 1.</td></tr><tr id="property-find.replace.matchcase"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-find.replace.regexp"></a><a name="property-find.replace.wrap"></a><a name="property-find.replace.escapes"></a>find.replace.matchcase<br>find.replace.regexp<br>find.replace.wrap<br>find.replace.escapes</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">These properties define the initial conditions for find and replace commands. The find.replace.matchcase property turns of the "Match case" option, find.replace.regexp the "Regular expression" option, find.replace.wrap the "Wrap around" option and find.replace.escapes the "Transform backslash expressions" option.<br></td></tr><tr class="windowsonly" id="property-find.replacewith.focus" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">find.replacewith.focus</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If the find.replacewith.focus property is set, the Replace With input box is focused in the Replace dialog if Find What is non-empty.</td></tr><tr id="property-find.replace.regexp.posix"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">find.replace.regexp.posix</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Change behaviour of Regular expression search. If set to 0 (the default), characters '(' and ')' must be escaped by '\' to behave as regexp meta characters. If set to 1, these characters are meta characters itself.</td></tr><tr id="property-find.use.strip"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-replace.use.strip"></a>find.use.strip<br>replace.use.strip</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Use in-window strips rather than dialogs for performing Find or Replace commands.</td></tr><tr id="property-find.strip.incremental"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-replace.strip.incremental"></a>find.strip.incremental<br>replace.strip.incremental</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Perform incremental search when typing in the find and replace strips. Set to 1 to enable incremental searching and 2 to enable both incremental searching and highlighting all matches. Highlighting all matches (2) can be slow on large files so should only be enabled when performance is reasonable.</td></tr><tr id="property-find.indicator.incremental"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">find.indicator.incremental</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Sets the indicator to use for find.strip.incremental=2 or replace.strip.incremental=2. This is a&nbsp;<a href="file:///E:/MODS/doc/SciTEDoc.html#IndicatorProperty">structured property</a>&nbsp;with multiple attributes similar to:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">find.indicator.incremental=style:compositionthick,colour:#FFB700,under</div></td></tr><tr class="gtkonly" id="property-strip.button.height" style="background: rgb(255, 255, 231);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">strip.button.height</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Buttons on GTK+ often contain extra spacing that makes strips take too much room. This setting tries to limit the height of buttons. A value of 23 or 24 may work well.</td></tr><tr class="osxonly" id="property-strip.shortcuts.enable" style="background: rgb(255, 231, 231);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">strip.shortcuts.enable</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">On OS X, default behaviour is to allow use of shortcuts in the Find and Replace strips such as ⌘W to turn "Match whole word only" on or off. This prevents closing the file with ⌘W so shortcuts can be disabled for strips by setting this property to 0. This property is only read at start up.</td></tr><tr id="property-find.replace.advanced"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">find.replace.advanced</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Enables Replace in Buffers command&nbsp;<span class="windowsonly" style="background: rgb(235, 243, 255);">and Search only in this style checkbox. If enabled, searches can be restricted to a particular style (e.g. strings).</span></td></tr><tr class="osxonly" id="property-find.indicator" style="background: rgb(255, 231, 231);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">find.indicator</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Controls the animated golden match indicator on OS X. The default value, 1, shows and animates the find indicator then fades it away so surrounding text can be seen clearly. Use the value 0 to disable the find indicator and the value 2 to keep the find indicator displayed. This setting is not available on OS X 10.6.</td></tr><tr id="property-find.command"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">find.command<br><span class="windowsonly" style="background: rgb(235, 243, 255);">find.input</span></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The Find in Files command works in a similar way to the building commands executing a command line tool with output redirected to the output pane. If the command produces output understood by one of the error output passes, as does grep, then the F4 and Shift+F4 keys can be used to move through all the matches. The $(find.what), $(find.files), and $(find.directory) variables can be used for the values from the Find in Files dialog.<br>There are some scripts that implement this feature in Perl better than grep does itself&nbsp;<a href="http://jenda.krynicky.cz/#SciteFind">here</a>&nbsp;and&nbsp;<a href="http://www.forusers.com/forme/finder.zip">here</a>. This command line works with Cygwin on Windows, with modifications to suit the Cygwin installation directory:<br><div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">find.command=cmd /c c:\cygwin\bin\find "$(find.directory)" -name "$(find.files)" -print0 | c:\cygwin\bin\xargs -0 fgrep -G -n "$(find.what)"</div>On Windows, the find string can be given to the find command through its standard input stream to avoid problems with quote interpretation. To do this, specify find.input to be the search string, $(find.what).&nbsp;<br>If find.command is empty then SciTE's own search code is used. This only does a simple search without regular expressions and is faster than running an external program.</td></tr><tr id="property-find.files"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">find.files</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This is the default set of files to search through using the Find in Files command. The find.files property can contain a list of sets of files separated by '|' like "*.cxx *.h|*.py *.pyw|*.html" which adds three entries to the history and uses the first as the default value.<br>The evaluation of this setting is a little unusual in that each entry in the value from the property files is appended to the end of the history if that entry is not already present. This means that opening files from different directories will result in any local setting of find.files being added to the list.</td></tr><tr id="property-find.in.dot"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">find.in.dot</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If find.in.dot is 1 then Find in Files searches in directories that start with '.'. The default behaviour is to prevent SciTE finding matches in the unmodified versions of files kept by Subversion in .svn subdirectories.</td></tr><tr id="property-find.in.binary"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">find.in.binary</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If find.in.binary is 1 then Find in Files displays matches in binary files. For Find in Files, a binary file is a file that contains a NUL byte in the first 64K block read from the file.</td></tr><tr id="property-find.in.directory"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">find.in.directory</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If set then Find in Files directory will be prefilled by this value. If not set then Find in Files directory will be prefilled by directory of current file.</td></tr><tr id="property-find.in.files.close.on.find"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">find.in.files.close.on.find</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 0 to prevent the Find in Files dialog from closing when "Find" pressed.</td></tr><tr id="property-code.page"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-output.code.page"></a>code.page<br>output.code.page</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">To support a DBCS language such as Japanese, a code page can be set here. This ensures that double byte characters are always treated as a unit so the caret is never located between the two bytes of a double byte character.<br><br><table style="border: 1px solid rgb(31, 31, 31); border-collapse: collapse;"><thead><tr><th style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Code page</th><th style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Value</th></tr></thead><tbody><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Default (single byte character set)</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">UTF-8</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">65001</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Japanese Shift-JIS</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">932</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Simplified Chinese GBK</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">936</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Korean Wansung</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">949</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Traditional Chinese Big5</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">950</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Korean Johab</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1361</td></tr></tbody></table>Setting code.page to 65001 starts Unicode mode and the document is treated as a sequence of characters expressed as UTF-8. Display is performed by converting to the platform's normal Unicode encoding first so characters from any language will be displayed. Correct glyphs may only be displayed if fonts are chosen that contain the appropriate glyphs. The Tahoma font contains a wide range of glyphs so may be a good choice.&nbsp;<br>This property can&nbsp;<em>not</em>&nbsp;set a single byte character set.<br>If output.code.page is set then it is used for the output pane which otherwise matches the edit pane.</td></tr><tr id="property-character.set"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">character.set</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This setting allows changing the character set that is asked for when setting up fonts. Not all of the values will work on all platforms.<br><br><table style="border: 1px solid rgb(31, 31, 31); border-collapse: collapse;"><thead><tr><th style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Character set</th><th style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Value</th></tr></thead><tbody><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Default</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Japanese</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">128</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Chinese GB2312</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">134</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Chinese BIG5</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">136</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Korean</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">129</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Greek</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">161</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Eastern European</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">238</td></tr><tr class="windowsonly" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Baltic</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">186</td></tr><tr class="windowsonly" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Turkish</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">162</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Hebrew</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">177</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Arabic</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">178</td></tr><tr class="windowsonly" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Thai</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">222</td></tr><tr class="windowsonly" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Vietnamese</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">163</td></tr><tr class="gtkonly" style="background: rgb(255, 255, 231);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Cyrillic (CP866 on GTK+)</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">866</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Cyrillic (CP1251 on Windows, KOI8-R on GTK+)</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">204</td></tr><tr class="gtkonly" style="background: rgb(255, 255, 231);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Cyrillic (CP1251 on GTK+)</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1251</td></tr><tr class="gtkonly" style="background: rgb(255, 255, 231);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">European with Euro (ISO 8859-15)</td><td align="right" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1000</td></tr></tbody></table>All of these values except for 1251 and 1000 should work on OS X or Windows. On GTK+ Baltic, Turkish, Thai and Vietnamese will probably not work.</td></tr><tr id="property-ime.interaction"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">ime.interaction</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Allows a choice between windowed and inline Input Method Editors with 0 choosing windowed mode and 1 the in-line mode. If there is no setting then a mode is chosen that may differ between platforms and locales.</td></tr><tr id="property-ime.autocomplete"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">ime.autocomplete</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Setting 1 enables autocompletion on ime input. To see the autocomplete box and calltip box, autocomplete.*.start.characters and calltip.*.word.characters should be given. Others such as calltip.parameters.* with ime characters are not supported. It defaults to 0, so disabled.</td></tr><tr class="gtkonly" id="property-accessibility" style="background: rgb(255, 255, 231);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">accessibility</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">On GTK+, accessibility of the edit and output panes may be disabled by setting accessibility to 0. Disabling accessibility may moderately improve performance and memory use. This only affects the custom accessibility implementation, not the functionality provided by the system such as speaking the characters typed. It defaults to 1, so enabled.</td></tr><tr id="property-imports.include"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-imports.exclude"></a>imports.include<br>imports.exclude</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">These settings control which files are imported by import statements.<br>The imports.include property defines the names of the properties files that may be imported. Say you are only interested in using fortran and lisp, then in user properties, you could set<br><div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">imports.include=fortran lisp</div>The imports.exclude property is examined only if imports.include is empty or missing. This property stops the named files from being imported.<br>The properties files shipped with SciTE, and which can be included or excluded with these properties, are:<br>abaqus ada asl asm asn1 au3 ave avs baan blitzbasic bullant caml cmake cobol coffeescript conf cpp csound css d ecl eiffel erlang escript flagship forth fortran freebasic gap haskell hex html inno kix latex lisp lot lout lua matlab metapost mmixal modula3 nimrod nncrontab nsis opal oscript others pascal perl pov powerpro powershell ps purebasic python r rebol registry ruby rust scriptol smalltalk sorcins specman spice sql tacl tal tcl tex txt2tags vb verilog vhdl yaml.</td></tr><tr id="property-command.discover.properties"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">command.discover.properties</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This property can be used to run a program to determine file encoding and other properties when a file is loaded.<br>The program should print a list of property=value lines for each property it wants to set. This is the same format as properties files.<br><div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">command.discover.properties=python /home/user/FileDetect.py "$(FilePath)"</div>A simple Python script that recognises a particular tag that indicates the file is in the Korean code page 949:<br><div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;"><span class="S5">import</span><span class="S0">&nbsp;</span>sys<br><span class="S5">if</span><span class="S0">&nbsp;</span><span class="S3">"Language:Korean"</span><span class="S0">&nbsp;</span><span class="S5">in</span><span class="S0">&nbsp;</span>open<span class="S10">(</span>sys<span class="S10">.</span>argv<span class="S10">[</span><span class="S2">1</span><span class="S10">]).</span>read<span class="S10">():</span><br><span class="S0">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="S5">print</span><span class="S10">(</span><span class="S4">'code.page=949'</span><span class="S10">)</span><br><span class="S0">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span class="S5">print</span><span class="S10">(</span><span class="S4">'character.set=129'</span><span class="S10">)</span><br><span class="S0"></span></div></td></tr><tr id="property-comment.block"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-comment.block.at.line.start"></a><a name="property-comment.stream.start"></a><a name="property-comment.stream.end"></a><a name="property-comment.box.start"></a><a name="property-comment.box.middle"></a><a name="property-comment.box.end"></a>comment.block.<i>lexer</i><br>comment.block.at.line.start.<i>lexer</i><br>comment.stream.start.<i>lexer</i><br>comment.stream.end.<i>lexer</i><br>comment.box.start.<i>lexer</i><br>comment.box.middle.<i>lexer</i><br>comment.box.end.<i>lexer</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">These settings are for the comment commands in the Edit menu and are defined separately for each lexer. Not all languages support both stream and block comments.<br>Block comments are comments that start with a particular string and continue until the end of line. The comment.block property sets the string to be inserted or deleted at the start of the selected lines when the Block Comment or Uncomment command is performed. To make this command perform sensibly over a range of text that already contains comments and other code, the string can be defined to contain a character such as '~' that is not used in real comments.<br>Set comment.block.at.line.start to "1" to place block comment symbols at the start of the lines, instead of just before the first non-blank character of the lines.<br>Stream comments start with a particular string and end with another particular string and may continue over line ends. These are defined with comment.stream.start and comment.stream.end.&nbsp;<br>Box comments are a form of stream comment that takes several lines and uses different strings for the start, end and other lines in the range. These are defined with comment.box.start, comment.box.middle and comment.box.end.</td></tr><tr id="property-preprocessor.symbol"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-preprocessor.start"></a><a name="property-preprocessor.middle"></a><a name="property-preprocessor.end"></a>preprocessor.symbol.<i>filepattern</i><br>preprocessor.start.<i>filepattern</i><br>preprocessor.middle.<i>filepattern</i><br>preprocessor.end.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">These settings make the preprocessor conditional movement and selection commands work. The character that defines preprocessor lines is defined by preprocessor.symbol. The preprocessor keywords that make up the start (if), middle (else), and end (endif) of preprocessor conditionals are defined by the other three properties. There may be multiple values for each of these, as, for example, C uses "if", "ifdef", and "ifndef" to begin preprocessor conditionals.</td></tr><tr id="property-lexer"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexer.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">A lexer splits a file up into syntactic pieces. SciTE can then display these pieces in different visual styles. Many lexers are included in SciTE for popular programming languages such as Python, Java, C/C++, JavaScript and VB. Often several file extensions (.cpp, .cc, .h) can map to one language (C++) and hence one lexer. These settings associate a file name with a lexer.<br>The lexers included in SciTE are written in C++ and compiled into the SciTE executable. Lexers can also be written as a&nbsp;<a href="file:///E:/MODS/doc/ScriptLexer.html">Lua script</a>&nbsp;or as a Lua LPeg lexer using&nbsp;<a href="http://code.google.com/p/scintillua/">scintillua</a>.</td></tr><tr id="property-shbang"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">shbang.<i>command</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">On Unix, command files often have no extension and instead specify the interpreter to use for the file in an initial line that starts with "#!". When the lexer can not be otherwise determined and the file starts with "#!", the initial line is split up into words and each word is prepended with "shbang.". If a property with this name exists then it is treated as the extension of the file. For example,&nbsp;<span class="example" style="color: rgb(0, 128, 0); font-weight: bold;">shbang.python=py</span>&nbsp;will be triggered by an initial line&nbsp;<span class="example" style="color: rgb(0, 128, 0); font-weight: bold;">#!/usr/bin/env python</span>&nbsp;so the file will be treated as Python.</td></tr><tr id="property-lexerpath"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">lexerpath.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Specifies the path to an external lexer module that will be loaded into Scintilla.</td></tr><tr id="property-keywords"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-keywords2"></a><a name="property-keywords3"></a><a name="property-keywords4"></a><a name="property-keywords5"></a><a name="property-keywords6"></a><a name="property-keywords7"></a><a name="property-keywords8"></a><a name="property-keywords9"></a><a name="property-keywordclass"></a>keywords.<i>filepattern</i><br>keywords2.<i>filepattern</i><br>keywords3.<i>filepattern</i><br>keywords4.<i>filepattern</i><br>keywords5.<i>filepattern</i><br>keywords6.<i>filepattern</i><br>keywords7.<i>filepattern</i><br>keywords8.<i>filepattern</i><br>keywords9.<i>filepattern</i><br>keywordclass.<i>lexer</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Most of the lexers differentiate between names and keywords and use the keywords variables to do so. To avoid repeating the keyword list for each file extension, where several file extensions are used for one language, a keywordclass variable is defined in the distributed properties file although this is just a convention. Some lexers define a second set of keywords which will be displayed in a different style to the first set of keywords. This is used in the HTML lexer to display JavaScript keywords in a different style to HTML tags and attributes.<br>Keywords can be prefix based so ^GTK_ will treat all words that start with GTK_ as keywords.</td></tr><tr id="property-default.file.ext"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">default.file.ext</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Defines the language mode used before the file has a name. For example, if default.file.ext=.py, then when the New command is used to create a new file then Python syntax styling is used.</td></tr><tr id="property-word.characters"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">word.characters.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Defines which characters can be parts of words. The default value here is all the alphabetic and numeric characters and the underscore which is a reasonable value for languages such as C++.</td></tr><tr id="property-whitespace.characters"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">whitespace.characters.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Defines which characters are considered whitespace. The default value is that initially set up by Scintilla, which is space and all chars less than 0x20. Setting this property allows you to force Scintilla to consider other characters as whitespace (e.g. punctuation) during such activities as cursor navigation (ctrl+left/right).</td></tr><tr id="property-style.*"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">style.*.<i>stylenumber</i><br>style.<i>lexer</i>.<i>stylenumber</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The lexers determine a style number for each lexical type, such as keyword, comment or number. These settings determine the visual style to be used for each style number of each lexer.<br>The value of each setting is a set of ',' separated fields, some of which have a subvalue after a ':'. The fields are:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">font, size, fore, back, italics, notitalics, bold, notbold, weight, eolfilled, noteolfilled, underlined, notunderlined, case, visible, notvisible, changeable, and notchangeable</div>The font field has a subvalue which is the name of the font, the fore and back have colour subvalues, the size field has a (fractional) numeric size subvalue, the weight field has a numeric size subvalue (1.. 999: 100=light, 400=normal, 700=bold), the case field has a subvalue of 'm', 'u', or 'l' for mixed, upper or lower case, and the bold, italics and eolfilled fields have no subvalue. The value "fore:#FF0000,font:Courier,size:14" represents 14 point, red Courier text.<br>A global style can be set up using style.*.<i>stylenumber</i>. Any style options set in the global style will be inherited by each lexer style unless overridden.</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">style.<i>lexer</i>.32<br>style.<i>lexer</i>.33<br>style.<i>lexer</i>.34<br>style.<i>lexer</i>.35<br>style.<i>lexer</i>.36<br>style.<i>lexer</i>.37<br>style.<i>lexer</i>.38</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">As well as the styles generated by the lexer, there are other numbered styles used.<br>Style 32 is the default style and its features will be inherited by all other styles unless overridden.<br>Style 33 is used to display line numbers in the margin.<br>Styles 34 and 35 are used to display matching and non-matching braces respectively.<br>Style 36 is used for displaying control characters. This is not a full style as the foreground and background colours for control characters are determined by their lexical state rather than this style.<br>Style 37 is used for displaying indentation guides. Only the fore and back are used.<br>Style 38 is used for displaying calltips. Only the font, size, fore and back are used.<br>A * can be used instead of a lexer to indicate a global style setting.</td></tr><tr id="property-substyles"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">substyles.<i>lexer</i>.<i>stylenumber</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Substyles are mainly used to display sets of identifiers distinctly. When working with a particular library, you may want to highlight all the calls to functions in that library differently to your own functions or operating system calls. Substyles splits one style, commonly an identifier style, into several groups. Only some lexers support this and within a lexer it will only be supported for some styles. Currently the cpp lexer allows substyles for identifiers (11) and comment doc keywords (17), and the python lexer allows substyles for identifiers (11). Language properties files will specify the styles that can be split.<br>This setting defines how many substyles are allocated to a particular main style. To allow 2 extra styles for identifiers in C++:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">substyles.cpp.11=2</div></td></tr><tr id="property-substylewords"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">substylewords.<i>mainstyle</i>.<i>substyle</i>.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This property defines which words are to be styled in a particular substyle, in a similar way to keywords. For example, to use the first substyle of identifiers (11) for the C++ standard library identifiers "std", "map", "string", and "vector":<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">substylewords.11.1.$(file.patterns.cpp)=std map string vector</div></td></tr><tr id="property-style.sub"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">style.<i>lexer</i>.<i>mainstyle</i>.<i>substyle</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This property defines the visual appearance of a substyle. For example, to display the first substyle of identifiers (11) as pink:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">style.cpp.11.1=fore:#EE00AA</div></td></tr><tr class="windows-osx" id="property-font.quality" style="background: rgb(255, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">font.quality</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This setting allows choosing different ways of drawing text on Windows and OS X. The appearance will depend on platform settings and, on Windows, the technology setting. This setting does not currently have any effect on GTK+.<table style="border: 1px solid rgb(31, 31, 31); border-collapse: collapse;"><thead><tr><th style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Value</th><th style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Meaning</th></tr></thead><tbody><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Default</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Non-antialiased</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">2</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Antialiased</td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">3</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">LCD Optimized</td></tr></tbody></table></td></tr><tr id="property-braces.check"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-braces.sloppy"></a>braces.check<br>braces.sloppy<br>style.<i>lexer</i>.34<br>style.<i>lexer</i>.35<br>braces.<i>lexer</i>.style</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Brace highlighting is a feature that shows the range of a brace when the caret is positioned immediately after it. It is especially useful when complex nested braces are used. The characters '(', ')', '[', ']', '{', and '}' are considered braces. The feature defaults to off (because it slows cursor movement) unless braces.check is set to 1. If braces.sloppy is set to 1 then if there is no brace before the caret then the character after the caret is checked. The highlighting is performed by displaying the braces in style number 34 or in style number 35 if there is no matching brace. While this is a full style, to avoid partial display of the braces, it is best to make this style differ from the standard style of braces only in foreground and background colour. Only braces with style set to braces.<i>lexer</i>.style (which defaults to 0) are candidates for brace match highlighting.</td></tr><tr id="property-font.monospace"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">font.monospace</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Defines, with the same syntax as the style properties, the font name and size to be used when the Use Monospaced Font command is performed.</td></tr><tr id="property-command.compile"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-command.compile.subsystem"></a><a name="property-command.build"></a><a name="property-command.build.subsystem"></a><a name="property-command.build.directory"></a><a name="property-command.go"></a><a name="property-command.go.subsystem"></a>command.compile.<i>filepattern</i><br>command.compile.subsystem.<i>filepattern</i><br>command.build.<i>filepattern</i><br>command.build.subsystem.<i>filepattern</i><br>command.build.directory.<i>filepattern</i><br>command.clean.<i>filepattern</i><br>command.clean.subsystem.<i>filepattern</i><br>command.go.<i>filepattern</i><br>command.go.subsystem.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">These settings choose which commands to execute when the Compile, Build, Clean or Go menu items are selected. The subsystem options are explained in the subsystem section.<br>When source files are in a different directory to that they should be built in, the command.build.directory property can be set to change to a particular directory before performing the build.</td></tr><tr id="property-command.go.needs"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-command.go.needs.subsystem"></a>command.go.needs.<i>filepattern</i><br>command.go.needs.subsystem.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Sometimes a file must be compiled or built before it can be run. If this is the case, this setting indicates what command needs to be run to perform the compile or build step before running the file. When a file is compiled, this is noted and future runs will not perform a compile or build. To make a 'compile and go' Go command for .c files:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">command.go.*.c=$(FileName)<br>command.go.needs.*.c=g++ $(FileNameExt) -o $(FileName)<br></div></td></tr><tr><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">command.name.<i>number</i>.<i>filepattern</i><br>command.<i>number</i>.<i>filepattern</i><br>command.is.filter.<i>number</i>.<i>filepattern</i><br>command.subsystem.<i>number</i>.<i>filepattern</i><br>command.save.before.<i>number</i>.<i>filepattern</i><br><span class="windowsonly" style="background: rgb(235, 243, 255);">command.input.<i>number</i>.<i>filepattern</i></span><br>command.replace.selection.<i>number</i>.<i>filepattern</i><br><span class="windowsonly" style="background: rgb(235, 243, 255);">command.quiet.<i>number</i>.<i>filepattern</i></span><br>command.mode.<i>number</i>.<i>filepattern</i><br>command.shortcut.<i>number</i>.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Extra commands can be added to the Tools menu. For example to include the 'astyle' indenter, the properties file could contain<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">command.name.0.*.cc=Indent<br>command.0.*.cc=astyle -taO $(FileNameExt)<br>command.is.filter.0.*.cc=1</div>The first line defines the string that will appear in the Tools menu (immediately below 'Go'). The second line is the command string, similar to those of the compile, build, and go commands. The optional command.is.filter property states that the command modifies the current file so it may need to be read in after performing the command if load.on.activate is set.<br>If command.save.before is set to 1, SciTE automatically saves the file before execution. If it is set to 2, SciTE will not save the file, otherwise SciTE asks you. On Windows, the optional command.input property specifies text that will be piped to the command. This may reference other properties; for example,&nbsp;<span class="example" style="color: rgb(0, 128, 0); font-weight: bold;">command.input.0.*.cc=$(CurrentSelection)</span>would pipe the current selection to the command processes. The command.input property is only supported for subsystem 0 (command line programs).<br><br>The optional command.replace.selection can be used to specify that the command output should replace the current selection (or be inserted at the cursor location, if there is no selection). This property has three available settings: 0, the default, means do not replace the selection. 1 means replace the selection when the command finishes. 2 means replace the selection only if the command finishes with an exit code of 0. If the user cancels the command via "Tools / Stop Executing", the selection will not be replaced even in mode 1. Note, commands run asynchronously, so you are not prevented from modifying the document or even switching buffers while a command is running. However, please bear in mind that command.replace.selection will send the output to whatever window is active&nbsp;<i>when the command completes</i>.<br>A final command property that is currently supported only on windows is command.quiet. A value of 1 indicates that the command I/O should not be echoed to the output pane. This may be useful in combination with command.input and command.replace.selection.<br><br>The command.mode property is a comma-separated list of flags / settings. Each mode setting can have an argument, separated from the setting name by a colon. For most of these, the argument portion is optional; if the setting name appears without an argument, this works the same as "setting:yes". If a setting is included in the command.mode but also appears as a separate command property, the mode property will be overridden. Similarly, if a single setting appears more than once with different arguments, the last valid argument takes priority. The supported command.mode settings are:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">filter - accepts keyword arguments yes and no<br>quiet - accepts keyword arguments yes and no<br>replaceselection - accepts yes, no, and auto<br>savebefore - accepts yes, no, and prompt<br>subsystem - console, windows, shellexec, lua, director, winhelp, htmlhelp, immediate<br>groupundo - yes or no</div>Currently, all of these except groupundo are based on individual properties with similar names, and so are not described separately here. The groupundo setting works with subsystem 3 (lua / director), and indicates that SciTE should treat any changes made by the command as a single undo action. A command that uses the groupundo setting should not change which buffer is active in the editor.<br>The command.shortcut property allows you to specify a keyboard shortcut for the command. By default, commands 0 to 9 have keyboard shortcuts Ctrl+0 to Ctrl+9 respectively, but this can be overridden. For commands numbered higher than 9, there is no default keyboard shortcut. The notation used to specify keyboard shortcuts is the same as for the user.shortcuts property, described elsewhere in this document.<br><br>If the text of a command starts with '*' then the Parameters dialog is displayed to prompt for parameters before executing the command. The initial '*' is not included in the command that is executed.<br><br>The command number can be in the range of 0 to 49. Command numbers 0 to 9 are assigned Ctrl+Number shortcuts. Internally these commands use IDs starting from 1100 (IDM_TOOLS) which can be used in user.shortcuts and user.context.menu as:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">user.context.menu=Indent|1100|</div>If command.name is empty then no item is added to the Tools menu. This can be used for commands that are only in the context menu or user shortcuts.</td></tr><tr id="property-command.help"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-command.help.subsystem"></a>command.help.<i>filepattern</i><br>command.help.subsystem.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Defines a command to be executed when the help command is invoked or F1 pressed. On Windows, this often uses subsystem 4 as described above. On OS X or Linux, running man or a browser are common ways of displaying help. The word at the cursor is copied to $(CurrentWord) and this is often a good argument to the help application. The subsystem property works in the same way as for other commands.</td></tr><tr id="property-command.scite.help"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-command.scite.help.subsystem"></a>command.scite.help<br>command.scite.help.subsystem</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Defines a command to be executed for help on the SciTE program itself which normally means displaying this file in a browser.</td></tr><tr id="property-time.commands"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">time.commands</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">When a command is completed, print the time it took in seconds.</td></tr><tr id="property-print.magnification"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">print.magnification</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Printing is normally done with the same settings as screen display. To make the printing larger or smaller, the print.magnification setting is added to the size of every font when printed. To get a good miniaturisation of text, set print.magnification to -4.</td></tr><tr id="property-print.colour.mode"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">print.colour.mode</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Some people prefer light coloured text on a black background on screen but dark text on white on paper. If print.colour.mode is set to 1 then each colour is inverted for printing. If set to 2 then printing produces black text on white background. 3 forces the background to white and 4 forces the default background to white.</td></tr><tr class="windowsonly" id="property-print.margins" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">print.margins</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Specify the default margins on the printer on Windows in left right top bottom order. Units depends on your locale, either hundredths of millimetres or thousandths of inches. You can see which units by the units used in the page setup dialog. This property is only read at start up.</td></tr><tr id="property-print.header.format"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-print.footer.format"></a>print.header.format<br>print.footer.format</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">These settings determine what will be printed if anything as headers and footers. Property settings can be substituted into the values using the $(property) syntax. There are some extra properties set up while printing: CurrentPage, FileTime, FileDate, CurrentDate, and CurrentTime (at start of printing). Common properties to use in headers and footers are FileNameExt and FilePath.<br>A header setting may look like:<br><div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">print.header.format=$(FileNameExt) - Printed on $(CurrentDate),$(CurrentTime) - Page $(CurrentPage)</div></td></tr><tr id="property-print.header.style"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-print.footer.style"></a>print.header.style<br>print.footer.style</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">These settings determine the style of the header and footer using the same format as other styles in SciTE. Only the fore, back, font, size, bold, italics, and underlined attributes are supported.</td></tr><tr id="property-export.keep.ext"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">export.keep.ext</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">This property determines how the file name (for example, LineMarker.cxx) is transformed when exporting to include the appropriate export format extension - .html for HTML and .rtf for RTF. If export.keep.ext is the default, 0, then the current extension is replaced (LineMarker.html). If it is 1, then the export format extension is added (LineMarker.cxx.html). If it is 2 then the final '.' is replaced by '_' and the export format extension added (LineMarker_cxx.html).</td></tr><tr id="property-export.html.wysiwyg"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-export.html.tabs"></a><a name="property-export.html.folding"></a><a name="property-export.html.styleused"></a><a name="property-export.html.title.fullpath"></a>export.html.wysiwyg<br>export.html.tabs<br>export.html.folding<br>export.html.styleused<br>export.html.title.fullpath</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">When export.html.wysiwyg is set to 0 then exporting to a HTML file produces a smaller file but which is less completely specified so may look more different to the on screen display. When export.html.tabs is set to 1 and export.html.wysiwyg is set to 0 then tab characters in the file are exported as tab characters rather than a sequence of space characters.<br>The exported file can be made to fold in browsers that support CSS well (Mozilla and Internet Explorer) by setting export.html.folding to 1. Only export styles actually used when export.html.styleused set to 1. The full path name of the file is put in the title, instead of just the file name when export.html.title.fullpath set to 1.</td></tr><tr id="property-export.rtf.wysiwyg"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-export.rtf.tabs"></a><a name="property-export.rtf.font.face"></a><a name="property-export.rtf.font.size"></a><a name="property-export.rtf.tabsize"></a>export.rtf.wysiwyg<br>export.rtf.tabs<br>export.rtf.font.face<br>export.rtf.font.size<br>export.rtf.tabsize</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">When export.rtf.wysiwyg is set to 0 then exporting to a RTF file produces a smaller file but which is less completely specified so may look more different to the on screen display. When export.rtf.tabs is set to 1 and export.rtf.wysiwyg is set to 0 then tab characters in the file are exported as tab characters rather than a sequence of space characters.&nbsp;<br>export.rtf.font.face and export.rtf.font.size can be used to select a particular font and size for the exported RTF file. export.rtf.tabsize can be set to use a different tab size than that defined by the tabsize setting.</td></tr><tr id="property-export.pdf.magnification"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-export.pdf.font"></a><a name="property-export.pdf.pagesize"></a><a name="property-export.pdf.margins"></a>export.pdf.magnification<br>export.pdf.font<br>export.pdf.pagesize<br>export.pdf.margins</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">export.pdf.magnification is a value that is added to the font size of the default screen style in use. A positive value increases the PDF document's font size, and vice versa.<br>export.pdf.font accepts a one-word parameter that selects one of the default PDF fonts: Courier, Helvetica or Times. Helvetica is the default. Helvetica and Times do not line wrap, Courier line wraps.<br>export.pdf.pagesize is used to set the document's page size, using points (1/72th of an inch) as the unit. E.g. Letter paper (8.5 inch x 11 inch) is specified using the values 612,792.<br>export.pdf.margins sets the widths of the page margins. Margins defaults to 72 points, or 1 inch.<br>The PDF exporter is necessarily feature-limited because PDF is a document archival format. Supporting a full set of features will bloat SciTE. Wrapping Helvetica or Times adequately isn't possible without the complexities of font metrics and kerning. The PDF produced uses WinAnsiEncoding, so pre-encoding has to be done before exporting to PDF, if you want to use extended characters.</td></tr><tr id="property-export.tex.title.fullpath"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">export.tex.title.fullpath</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The full path name of the file is put in the title, instead of just the file name when export.tex.title.fullpath set to 1.</td></tr><tr id="property-export.xml.collapse.spaces"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-export.xml.collapse.lines"></a>export.xml.collapse.spaces<br>export.xml.collapse.lines</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">export.xml.collapse.spaces and export.xml.collapse.lines are flags that control how empty lines and runs of space characters are converted into XML. The flags are enabled if set to 1. Tab characters are always converted by the XML exporter into spaces according to the tabsize property.</td></tr><tr id="property-fold"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Folding is turned on by setting fold=1.</td></tr><tr id="property-fold.symbols"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.symbols</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The fold.symbols setting chooses between four ways of showing folding. Set to 0 (the default) for MacOS style arrows to indicate contracted (facing right) and expanded (facing down); 1 to display contracted folds with "+" and expanded with "-"; 2 for a flattened tree control with round headers and rounded joins; 3 for a flattened tree control with square headers.</td></tr><tr id="property-fold.fore"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-fold.back"></a>fold.fore<br>fold.back</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Sets the colours used for folds. fold.fore sets the outline colour, fold.back sets the fill.</td></tr><tr id="property-fold.margin.width"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.margin.width</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Sets the width of the fold margin.</td></tr><tr id="property-fold.margin.colour"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-fold.margin.highlight.colour"></a>fold.margin.colour<br>fold.margin.highlight.colour</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">These two properties defined the fold margin colour and fold margin highlight colour. If they are not defined (left commented out) the colours for the fold margin will default to a reasonable pair of colours. On Windows, the system colours are used to make the fold margin appear like the background of scroll bars. As an example, with&nbsp;<span class="example" style="color: rgb(0, 128, 0); font-weight: bold;">fold.margin.colour=#FF0000</span>&nbsp;and&nbsp;<span class="example" style="color: rgb(0, 128, 0); font-weight: bold;">fold.margin.highlight.colour=#0000FF</span>, the fold margin is a mixture of red and blue.</td></tr><tr id="property-fold.on.open"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.on.open</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">To automatically fold files as much as possible when loaded, set fold.on.open to 1.</td></tr><tr id="property-fold.flags"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.flags</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Not really documented ;) bit flags which may go away. 2, 4, 8, and 16 control drawing lines above and below folding lines if expanded or not expanded. Set to 64 to help debug folding by showing hexadecimal fold levels in margin.</td></tr><tr id="property-fold.compact"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.compact<br></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">For HTML, XML, Lua and C++ and similar files, turning this option on leads to blank lines following the end of an element folding with that element. Defaults to on.</td></tr><tr id="property-fold.highlight"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.highlight<br></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set to 1 to enable highlight for current folding block (smallest one that contains the caret). By default, it's disable. Note : The highlight is enabled only when fold.symbols equals to 2 (round headers) or 3 (square headers).</td></tr><tr id="property-fold.highlight.colour"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fold.highlight.colour<br></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Define the colour of highlight. The colour by default is red (#FF0000).</td></tr><tr id="property-title.full.path"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">title.full.path</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Chooses how the file name is displayed in the title bar. When 0 (default) the file name is displayed. When 1 the full path is displayed. When 2 the window title displays "filename in directory".</td></tr><tr id="property-title.show.buffers"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">title.show.buffers</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">When set to 1 shows the current buffer number in the title bar.</td></tr><tr id="property-tabsize"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-tab.size"></a><a name="property-indent.size"></a><a name="property-use.tabs"></a><a name="property-indent.auto"></a><a name="property-tab.indents"></a><a name="property-backspace.unindents"></a>tabsize<br>tab.size.<i>filepattern</i><br>indent.size<br>indent.size.<i>filepattern</i><br>use.tabs<br>use.tabs.<i>filepattern</i><br>indent.auto<br>tab.indents<br>backspace.unindents</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Sets the size of a tab as a multiple of the size of a space character in the style of the default style definition. The indent size is the size to use when performing automatic indentation and may be different from the tab size. Many people use a tab size of 8 but 4 character indentation. When creating indentation, use.tabs determines whether the indentation is made up purely from space characters or from a mix of tabs and spaces using as many tabs as possible.&nbsp;<br>The global tabsize, indent.size, and use.tabs properties can be overridden for files that match a pattern by using the file pattern forms:&nbsp;<br><div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">indent.size.*.pas=3</div>If indent.auto is set then indent.size and use.tabs are set according to the contents of the opened document.<br>The properties file settings apply to newly opened files but remain constant once the file is open unless changed using the Change Indentation Settings dialog.<br>If tab.indents is set then pressing tab within indentation whitespace indents by indent.size rather than inserting a tab character. If backspace.unindents then pressing backspace within indentation whitespace unindents by indent.size rather than deleting the character before the caret.</td></tr><tr id="property-indent.automatic"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-indent.opening"></a><a name="property-indent.closing"></a><a name="property-indent.maintain"></a>indent.automatic<br>indent.opening<br>indent.closing<br>indent.maintain.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Determines the look of automatic indentation. Automatic indentation is turned on with indent.automatic=1. To indent a brace line after a compound statement start set indent.opening=1, likewise for the terminating brace. So with both set to 0:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">if (c)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;s;<br>}<br></div>And with both set to 1:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">if (c)<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;s;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br></div>Automatic indentation may be changed to simply repeat the indentation of the previous line for some files with indent.maintain.<i>filepattern</i>=1 which overrides the other language specific settings.</td></tr><tr id="property-statement.indent"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-statement.end"></a><a name="property-statement.lookback"></a><a name="property-block.start"></a><a name="property-block.end"></a>statement.indent.<i>filepattern</i><br>statement.end.<i>filepattern</i><br>statement.lookback.<i>filepattern</i><br>block.start.<i>filepattern</i><br>block.end.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Each of these settings starts with a style number and then a set of words or characters that define how to recognise that feature. If there is a second space in the setting then it is a set of words, otherwise a set of characters. The set of keywords used to indicate the start of a compound statement is defined in statement.indent. For example:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">statement.indent.$(file.patterns.cpp)=5 if else while</div>says that for C++ the words "if", "else", and "while" in keyword style, 5, start compound statements which leads to the next line being indented if no other factors affect it. However, if a statement end is found on the same line then the next line is not indented. For C++ the statement end is the semicolon in the operator style, so this is defined:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">statement.end.$(file.patterns.cpp)=10 ;</div>The number of lines looked at to determine indentation can be set with statement.lookback. This can be used either to bound the amount of time spent on this task or to specify that only the last line be examined for indentation.<br>The block.start and block.end properties define the language elements used to bracket groups of statements. In C++ these are '{' and '}'.</td></tr><tr id="property-indent.python.colon"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">indent.python.colon</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">For Python, automatically indent by one level if the previous line ended in a ':' ignoring comments and whitespace. Otherwise use the same indentation as the previous line. This property overrides other indentation settings.</td></tr><tr id="property-os.x.home.end.keys"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">os.x.home.end.keys</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Chooses the standard OS X behaviour for the Home and End keys which is to scroll the file to the start or end. This setting takes precedence over vc.home.key.</td></tr><tr id="property-vc.home.key"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">vc.home.key</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Chooses the behaviour of the Home and Shift+Home keys. 1, the default is like Visual C++ moving the caret to the end of the line indentation unless already there, in which case it moves to the start of the line. 0 moves to the start of the line.</td></tr><tr class="windowsonly" id="property-warning.findwrapped" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-warning.notfound"></a><a name="property-warning.wrongfile"></a><a name="property-warning.executeok"></a><a name="property-warning.executeko"></a><a name="property-warning.nootherbookmark"></a>warning.findwrapped<br>warning.notfound<br>warning.wrongfile<br>warning.executeok<br>warning.executeko<br>warning.nootherbookmark</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Allows for sounds to be played and the window to be flashed on Windows when particular events occur. The values consist of three items separated by ',': flash duration, sound and sound duration. If sound is a number then it is treated as a pitch and played for the duration in milliseconds. Otherwise it is treated as a path to a sound file that is played. If you do not want a flash, specify 0 for flash duration. For example,<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">warning.wrongfile=0,C:\Windows\Media\SFX\Glass.wav</div>will play the glass sound if open selected is given a bad file name. The findwrapped warning occurs when a find operation wraps past either end of the file, notfound when the find or preprocessor conditional move commands fail to find a match, executeok when a command such as build executes successfully, executeko when a command fails, and nootherbookmark when there is no bookmark to find.</td></tr><tr class="gtkonly" id="property-fileselector.width" style="background: rgb(255, 255, 231);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-fileselector.height"></a>fileselector.width<br>fileselector.height</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">For the GTK+ version determines the initial size of the file selector dialog invoked by the Open and Save commands. Setting has no effect on Windows.</td></tr><tr id="property-fileselector.show.hidden" class="osxonly" style="background: rgb(255, 231, 231);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">fileselector.show.hidden</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">On OS X setting this to 0 makes the file selector dialog invoked by the Open command not show hidden files.</td></tr><tr id="property-locale.properties"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">locale.properties</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set the name of the localisation file. For a multi-user installation this allows each user to set a preferred user interface language.<br>On OS X, localisation files for some languages are installed in the translations subdirectory of the user home directory which allows setting the user interface to, for example, German with<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">locale.properties=$(SciteUserHome)/translations/locale.de.properties</div></td></tr><tr id="property-translation.missing"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">translation.missing</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">When using a localised version, if a term is not found in the locale.properties translation file then use the value of translation.missing instead. By setting this to a marker such as "***" it is easier to check where terms have not been provided with translations.</td></tr><tr id="property-menu.language"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">menu.language</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Defines the entries in the Language menu and the file extensions they map to. Each menu item is defined by 3 elements, language name, extension and an optional keyboard equivalent. Each element is terminated by '|'. For example:<br><span class="example" style="color: rgb(0, 128, 0); font-weight: bold;">H&amp;ypertext|html|F12|</span><br>Menu items may be commented out by prefixing the name with '#'. The default value for this setting is built up by combining all&nbsp;<a href="file:///E:/MODS/doc/SciTEDoc.html#property-star-language">*language</a>&nbsp;settings.</td></tr><tr id="property-star-language"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">*language.<i>name</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Set a value to be included in the Language menu when using the default value for&nbsp;<a href="file:///E:/MODS/doc/SciTEDoc.html#property-menu.language">menu.language</a>. For example,&nbsp;<span class="example" style="color: rgb(0, 128, 0); font-weight: bold;">*language.ruby=Ruby|rb|F9|</span>&nbsp;adds a "Ruby" item to the Language menu which maps to the "rb" file extension and can be chosen with the F9 key. More than one language may be defined in one variable. There must be a multiple of 3 '|' characters in the setting.</td></tr><tr class="gtkonly" id="property-menukey.*" style="background: rgb(255, 255, 231);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">menukey.*</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The menukey.* settings allow the user to redefine accelerator keys for menus without having to resort to modifying the SciTE source code. The syntax for the setting is:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">menukey.menu_title.menu_name=&lt;modifier&gt;key</div>For example, the File | Exit command accelerator could be specified as follows:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">menukey.file.exit=&lt;control&gt;Q</div>Note that spaces in menu titles and names must be converted to underscores, and trailing ellipses removed. For example, "File | Save As...." is referenced as "menukey.file.save_as".&nbsp;<br><br>Multiple modifiers may be specified, though each must be surrounded by angle brackets. The recognised modifiers are the same as for the user.shortcuts setting described above. The recognised named keys are also the same as for user.shortcuts, with the addition of "none" to indicate that no accelerator key should be defined for a particular menu.</td></tr><tr class="windowsonly" id="property-source.default.extensions" style="background: rgb(235, 243, 255);"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">source.default.extensions</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If the name specified on the command line cannot be found as a directory or file - including a wild-card search, the contents of the property are treated as default extensions to be used to locate the file name.<br>An example is: .cxx|.cpp|.c|.hxx|.hpp|.h|.bat|.txt|.lua<br>Attempting to open win32\SciTEWin would open win32\SciTEWin.cxx since it matches before win32\SciTEWin.h&nbsp;<br>If the property contains an entry such as Bar.cxx|.cxx and you attempt to open win32\SciTEWin, it will open ScTEWinBar.cxx since that is the first match.</td></tr><tr id="property-ext.lua.startup.script"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;"><a name="property-ext.lua.auto.reload"></a><a name="property-ext.lua.reset"></a><a name="property-extension"></a>ext.lua.startup.script<br>ext.lua.auto.reload<br>ext.lua.reset<br>extension.<i>filepattern</i></td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">The ext.lua properties are specific to the&nbsp;<a href="file:///E:/MODS/doc/SciTELua.html">SciTE Lua Scripting Extension</a>. The extension.<i>filepattern</i>&nbsp;property is part of the generic&nbsp;<a href="file:///E:/MODS/doc/SciTEExtension.html">SciTE Extension Interface</a>&nbsp;but is currently only used by the Lua Scripting Extension.&nbsp;<br>The ext.lua.startup.script property defines the filename of a Lua script that will be loaded when SciTE starts to set up the global state for Lua. The default value is $(SciteUserHome)/SciTEStartup.lua. You should use an absolute path for this property, but can reference the $(SciteDefaultHome) or $(SciteUserHome) properties. Global event handlers, command functions, as well as other functions and objects can be defined here.&nbsp;<br>The ext.lua.auto.reload property determines what happens if you save the startup script, or the active extension script, from within SciTE. If it is set to 0, the startup script only applied at startup time or when you switch buffers (depending on ext.lua.reset), and changes to the extension script are only applied when you switch buffers. If ext.lua.auto.reload is set to 1 (the default), SciTE will re-initialize the global scope immediately when either script is saved from within SciTE.&nbsp;<i>Even when ext.lua.auto.reload is enabled, SciTE will not notice if the files are changed from outside the current SciTE instance. For that, see ext.lua.reset below.</i>&nbsp;<br>The ext.lua.reset property is primarily for debugging. If ext.lua.reset is 0 (the default), the startup script property is checked only once - when SciTE starts. If ext.lua.reset is changed to 1, SciTE will check the startup script property, and reload the new startup script, each time you switch buffers. As such, it has a different (larger) set of side effects than ext.lua.auto.reload. In some situations it will make sense for both auto.reload and reset to be enabled, but usually ext.lua.auto.reload alone will suffice.&nbsp;<br>Aside from ext.lua.startup.script, the extension.<i>filepattern</i>&nbsp;property provides a way to load additional functions and event handlers that may be specific to a given file type. If the extension property value ends in .lua and names a file that exists, the Lua extension evaluates the script so that event handlers and commands defined in the script are available while that buffer is active. Functions and objects defined through ext.lua.startup.script are still accessible, unless they are overridden.&nbsp;<br>The extension property can also define behaviour that is specific to a given directory. If a bare filename (no path) is specified in the extension property, SciTE looks for the file in the standard property file locations, starting with the local directory. This can be very useful in combination with a local SciTE.properties file.</td></tr><tr id="property-caret.sticky"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">caret.sticky</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Controls when the last position of the caret on the line is modified. When set to 1, the position is not modified when you type a character, a tab, paste the clipboard content or press backspace. The default is 0 which turns off this feature.</td></tr><tr id="property-properties.directory.enable"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">properties.directory.enable</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Enables or disables the evaluation of the directory properties file. The default is 0 which disables the evaluation. Any other value enables this properties file.</td></tr><tr id="property-save.path.suggestion"><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">save.path.suggestion</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">If set, SciTE suggests this name and directory when we perform the "Save" command for a new, unnamed buffer. The directory should exist. (This setting doesn't affect the "Save As" command). A save.path.suggestion setting may be defined as either a relative to $(SciteUserHome) path, like:<div class="example" style="color: rgb(0, 128, 0); font-weight: bold; background: rgb(247, 252, 247); border: 1px solid rgb(192, 215, 192); margin: 0.3em 3em; padding: 0.3em 0.6em; font-size: 12.8px;">save.path.suggestion=$(SciteUserHome)\Notes\note_$(TimeStamp).txt<br></div>or as a full path. It accepts both directory delimiters: the slash "/" and the backslash "\".<br>If $(TimeStamp) is specified, it will be replaced by an actual timestamp, 14 characters long.</td></tr></tbody></table><p style="color: rgb(0, 0, 0); font-family: &quot;Times New Roman&quot;; font-size: medium;">caret.policy.{x|y}&lt;param&gt; interaction:</p><table cellpadding="1" cellspacing="0" border="1" summary="Caret policy" style="border: 1px solid rgb(31, 31, 31); border-collapse: collapse; color: rgb(0, 0, 0); font-family: &quot;Times New Roman&quot;;"><tbody><tr><th style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">slop</th><th style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">strict</th><th style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">jumps</th><th style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">even</th><th style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Caret can go to the margin</th><th style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">When reaching limit<br>(going out of visibility or<br>going into the UZ)<br>display is...</th></tr><tr><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Yes</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">moved to put caret on top/on right</td></tr><tr><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Yes</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">moved by one position</td></tr><tr><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Yes</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">moved to put caret on top/on right</td></tr><tr><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Yes</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">centred on the caret</td></tr><tr><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">-</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Caret is always on top/on right of display</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">-</td></tr><tr><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">-</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">No, caret is always centred</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">-</td></tr><tr><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Yes</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">moved to put caret out of the asymmetrical UZ</td></tr><tr><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Yes</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">moved to put caret out of the UZ</td></tr><tr><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Yes</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">moved to put caret at 3UZ of the top or right margin</td></tr><tr><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Yes</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">moved to put caret at 3UZ of the margin</td></tr><tr><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">-</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">Caret is always at UZ of top/right margin</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">-</td></tr><tr><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">No, kept out of UZ</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">moved by one position</td></tr><tr><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">1</td><td align="center" style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">0</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">No, kept out of UZ</td><td style="border: 1px solid rgb(31, 31, 31); padding: 1px 5px;">moved to put caret at 3UZ of the margin</td></tr></tbody></table></body></html>